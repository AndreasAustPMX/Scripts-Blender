# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####

bl_info = {
    "name": "Wazou Right clic Pie",
    "author": "Cédric Lepiller",
    "version": (0, 1, 0),
    "blender": (2, 7, 1),
    "location": "View3D > RMB",
    "description": "Right Click Pie Menu",
    "category": "3D View"}

"""
Right Click Pie Menu
This adds a the Right Click Pie Menu in the View3D.
Left mouse is SELECTION.
Left shift Double click sets the 3D cursor.

"""

import bpy
import bmesh
from bpy.types import Menu
from bpy.props import IntProperty, FloatProperty, BoolProperty

########################
#      Properties      #               
########################

class WazouRightMenuPiePrefs(bpy.types.AddonPreferences):
    """Creates the tools in a Panel, in the scene context of the properties editor"""
    bl_idname = __name__

    bpy.types.Scene.Enable_Tab_RMB_01 = bpy.props.BoolProperty(default=False)
    bpy.types.Scene.Enable_Tab_RMB_02 = bpy.props.BoolProperty(default=False)
    
    def draw(self, context):
        layout = self.layout
        
        layout.prop(context.scene, "Enable_Tab_RMB_01", text="Shortcuts", icon="QUESTION")  
        if context.scene.Enable_Tab_RMB_01:
            row = layout.row()
            layout.label(text="– Object/Edit mode > RMB")
            layout.label(text="– Cusor > Alt + double clic")
        
        layout.prop(context.scene, "Enable_Tab_RMB_02", text="URL's", icon="URL") 
        if context.scene.Enable_Tab_RMB_02:
            row = layout.row()    
            
            row.operator("wm.url_open", text="Pitiwazou.com").url = "http://www.pitiwazou.com/"
            row.operator("wm.url_open", text="Wazou's Ghitub").url = "https://github.com/pitiwazou/Scripts-Blender"
            row.operator("wm.url_open", text="BlenderLounge Forum ").url = "http://blenderlounge.fr/forum/"      
            
#######################
#       Classes       #               
#######################

# Add Mesh #
class AddMenu(bpy.types.Menu):
    bl_label = "Add Mesh"
    
    def draw(self, context):
        layout = self.layout
        
        layout.operator("mesh.primitive_cube_add", text="Cube", icon='MESH_CUBE')
        layout.operator("mesh.primitive_plane_add", text="Plane", icon='MESH_PLANE')
        layout.operator("mesh.primitive_uv_sphere_add", text="UV Sphere", icon='MESH_UVSPHERE')
        layout.operator("mesh.primitive_cylinder_add", text="Cylinder", icon='MESH_CYLINDER')
        layout.operator("mesh.primitive_grid_add", text="Grid", icon='MESH_GRID')
        layout.operator("mesh.primitive_ico_sphere_add", text="Ico Sphere", icon='MESH_ICOSPHERE')
        layout.operator("mesh.primitive_circle_add", text="Circle", icon='MESH_CIRCLE')
        layout.operator("mesh.primitive_cone_add", text="Cone", icon='MESH_CONE')
        layout.operator("mesh.primitive_torus_add", text="Torus", icon='MESH_TORUS')
        layout.operator("mesh.primitive_monkey_add", text="Monkey", icon='MESH_MONKEY')
        layout.separator()
        layout.operator("object.camera_add", icon='OUTLINER_OB_CAMERA')
        layout.separator()  
        layout.operator("object.lamp_add", text="Area", icon='LAMP_AREA').type = 'AREA'
        layout.operator("object.lamp_add", text="Sun", icon='LAMP_SUN').type = 'SUN'
        layout.operator("object.lamp_add", text="Hemi", icon='LAMP_HEMI').type = 'HEMI'
        layout.operator("object.lamp_add", text="Point", icon='LAMP_POINT').type = 'POINT'
        layout.operator("object.lamp_add", text="Spot", icon='LAMP_SPOT').type = 'SPOT'
        layout.separator()
        layout.operator("curve.primitive_bezier_circle_add", icon='CURVE_BEZCIRCLE')
        layout.operator("curve.primitive_bezier_curve_add", icon='CURVE_BEZCURVE')
        layout.operator("curve.primitive_nurbs_path_add", icon='CURVE_PATH')
        layout.separator()
        layout.operator("object.empty_add", text="Empty AXE", icon='OUTLINER_OB_EMPTY').type = 'PLAIN_AXES'
        layout.operator("object.empty_add", text="Empty CUBE", icon='OUTLINER_OB_EMPTY').type = 'CUBE'
        layout.operator("object.add", text="Lattice", icon='OUTLINER_OB_LATTICE').type = 'LATTICE'
        layout.operator("object.text_add", text="Text", icon='OUTLINER_OB_FONT')
        layout.operator("object.armature_add", text="Armature", icon='OUTLINER_OB_ARMATURE')

#Subsurf 2
class SubSurf2(bpy.types.Operator):  
    bl_idname = "object.subsurf2"  
    bl_label = "SubSurf 2"  
  
    def execute(self, context):
        bpy.ops.object.subdivision_set(level=2)
        bpy.context.object.modifiers["Subsurf"].show_only_control_edges = True
        
        if bpy.context.object.mode == "EDIT":
            bpy.ops.object.subdivision_set(level=2)
            bpy.context.object.modifiers["Subsurf"].show_on_cage = True
            bpy.ops.object.mode_set(mode = 'EDIT')
        return {'FINISHED'} 

#Remove Subsurf
class RemoveSubsurf(bpy.types.Operator):  
    bl_idname = "remove.subsurf"  
    bl_label = "Remove Subsurf"  
  
    def execute(self, context):
        bpy.ops.object.modifier_remove(modifier="Subsurf")
        return {'FINISHED'}     

#Add Mirror Object
class AddMirrorObject(bpy.types.Operator):  
    bl_idname = "add.mirrorobject"  
    bl_label = "Add Mirror Object"  
  
    def execute(self, context):
        bpy.ops.object.modifier_add(type='MIRROR')
        bpy.context.object.modifiers["Mirror"].use_clip = True
        return {'FINISHED'}  
    
#Add Mirror Edit
class AddMirrorEdit(bpy.types.Operator):  
    bl_idname = "add.mirroredit"  
    bl_label = "Add Mirror Edit"  
  
    def execute(self, context):
        bpy.ops.object.modifier_add(type='MIRROR')
        bpy.context.object.modifiers["Mirror"].use_clip = True
        bpy.context.object.modifiers["Mirror"].show_on_cage = True
        return {'FINISHED'}   

#Apply Mirror Edit
class ApplyMirrorEdit(bpy.types.Operator):  
    bl_idname = "apply.mirroredit"  
    bl_label = "Apply Mirror Edit"  
  
    def execute(self, context):
        bpy.ops.object.mode_set(mode = 'OBJECT')
        bpy.ops.object.modifier_apply(modifier="Mirror")
        bpy.ops.object.mode_set(mode = 'EDIT')
        return {'FINISHED'}         

#wazou Symetrize
class WazouSymetrize(bpy.types.Operator):  
    bl_idname = "wazou.symetrize"  
    bl_label = "Wazou Symetrize"  
  
    def execute(self, context):
        bpy.ops.mesh.select_all(action='TOGGLE')
        bpy.ops.mesh.select_all(action='TOGGLE')
        bpy.ops.mesh.symmetrize(direction='POSITIVE_X')
        bpy.ops.mesh.select_all(action='TOGGLE')
        return {'FINISHED'} 

#Merge At Last
class MergeAtLast(bpy.types.Operator):  
    bl_idname = "merge.atlast"  
    bl_label = "Merge At Last"  
  
    def execute(self, context):
        bpy.ops.mesh.merge(type='LAST')
        return {'FINISHED'}  
    
#Merge At First
class MergeAtFirst(bpy.types.Operator):  
    bl_idname = "merge.atfirst"  
    bl_label = "Merge At First"  
  
    def execute(self, context):
        bpy.ops.mesh.merge(type='FIRST')
        return {'FINISHED'}   
    
#Merge At Center
class MergeAtCenter(bpy.types.Operator):  
    bl_idname = "merge.atcenter"  
    bl_label = "Merge At Centert"  
  
    def execute(self, context):
        bpy.ops.mesh.merge(type='CENTER')
        return {'FINISHED'}        
    
#Merge At Cursor
class MergeAtCursor(bpy.types.Operator):  
    bl_idname = "merge.atcursor"  
    bl_label = "Merge At Cursor"  
  
    def execute(self, context):
        bpy.ops.mesh.merge(type='CURSOR')
        return {'FINISHED'}    
    
#Merge Collapse
class MergeCollapse(bpy.types.Operator):  
    bl_idname = "merge.collapse"  
    bl_label = "Merge Collapse"  
  
    def execute(self, context):
        bpy.ops.mesh.merge(type='COLLAPSE')
        return {'FINISHED'}  
    
class VIEW3D_MT_edit_mesh_looptools(bpy.types.Menu):
    bl_idname = "loop.tools" 
    bl_label = "LoopTools"

    def draw(self, context):
        layout = self.layout

        layout.operator("mesh.looptools_bridge", text="Bridge").loft = False
        layout.operator("mesh.looptools_circle")
        layout.operator("mesh.looptools_curve")
        layout.operator("mesh.looptools_flatten")
        layout.operator("mesh.looptools_gstretch")
        layout.operator("mesh.looptools_bridge", text="Loft").loft = True
        layout.operator("mesh.looptools_relax")
        layout.operator("mesh.looptools_space") 

#Apply Transforms
class ApplyTransformAll(bpy.types.Operator):  
    bl_idname = "apply.transformall"  
    bl_label = "Apply Transform All"  
    
    def execute(self, context):
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)
        return {'FINISHED'}           

#Delete modifiers
class DeleteModifiers(bpy.types.Operator):  
    bl_idname = "delete.modifiers"  
    bl_label = "Delete modifiers" 
    
    def execute(self, context):
        selection = bpy.context.selected_objects
        
        if not(selection):  
            for obj in bpy.data.objects:
                for mod in obj.modifiers:
                    bpy.context.scene.objects.active = obj
                    bpy.ops.object.modifier_remove(modifier = mod.name)
        else:
            for obj in selection:
                for mod in obj.modifiers:
                    bpy.context.scene.objects.active = obj
                    bpy.ops.object.modifier_remove(modifier = mod.name)  
        return {'FINISHED'}  

#Clear All
class ClearAll(bpy.types.Operator):  
    bl_idname = "clear.all"  
    bl_label = "Clear All" 
    
    def execute(self, context):
        selection = bpy.context.selected_objects
        bpy.ops.object.location_clear()
        bpy.ops.object.rotation_clear()
        bpy.ops.object.scale_clear()
        return {'FINISHED'}      

#Separate Loose Parts
class SeparateLooseParts(bpy.types.Operator):  
    bl_idname = "separate.looseparts"  
    bl_label = "Separate Loose Parts" 
    
    @classmethod
    def poll(cls, context):
        return context.active_object is not None
    
    def execute(self, context):
        bpy.ops.object.mode_set(mode = 'EDIT')
        bpy.ops.mesh.separate(type='LOOSE')
        bpy.ops.object.mode_set(mode = 'OBJECT')
        bpy.ops.object.select_all(action='TOGGLE')
        return {'FINISHED'}  
                                   
######################
#        Pies        #               
######################            
class View3dRightClicMenu(Menu):
    bl_idname = "pie.rightclicmenu"
    bl_label = "Right Clic Menu"

    def draw(self, context):
        layout = self.layout

        pie = layout.menu_pie()
        #ob = context
        
        if bpy.context.area.type == 'VIEW_3D':
            
            #4 - LEFT
            pie.operator("remove.subsurf", text="Remove Subsurf", icon='X')
            #6 - RIGHT
            pie.operator("object.subsurf2", text="Subdiv Level 2", icon='MESH_UVSPHERE')
            #2 - BOTTOM
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("mesh.primitive_cube_add", text="Cube", icon='MESH_CUBE')
            box.operator("mesh.primitive_plane_add", text="Plane", icon='MESH_PLANE')
            box.operator("mesh.primitive_uv_sphere_add", text="UV-Sphere", icon='MESH_UVSPHERE')
            box.operator("mesh.primitive_cylinder_add", text="Cylinder", icon='MESH_CYLINDER')
            row = box.row(align=True)
            row = box.split(percentage=0.33)
            row.operator("object.camera_add", text="", icon='OUTLINER_OB_CAMERA')
            row.operator("object.lamp_add", text="", icon='LAMP_AREA').type = 'AREA'
            row.operator("object.lamp_add", text="", icon='LAMP_SUN').type = 'SUN'
            row.operator("object.lamp_add", text="", icon='LAMP_HEMI').type = 'HEMI'
            box.menu("AddMenu", text="Objects", icon="OBJECT_DATA")
            #8 - TOP
            pie.operator("screen.redo_last", text="F6", icon='SCRIPTWIN')
            #7 - TOP - LEFT 
            box = pie.split().column()
            row = box.split(percentage=0.5)
            row.operator("add.mirrorobject", text="Add Mirror", icon='MOD_MIRROR')
            row.operator("object.automirror", icon = 'MOD_MIRROR')
            row = box.row(align=True)
            row = box.split(percentage=0.5)
            row.operator("object.modifier_apply", text="Apply Mirror", icon='MOD_MIRROR').modifier="Mirror"
            row.operator("object.modifier_remove", text="Del Mirror", icon='X').modifier="Mirror"
            row = box.row(align=True)
            row = box.split(percentage=0.5)
            row.operator("object.modifier_apply", text="Apply Subsurf", icon='MOD_SUBSURF').modifier="Subsurf"
            row.operator("delete.modifiers", text="Del Modifiers", icon='GROUP')
            #9 - TOP - RIGHT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("apply.transformall", text="Freeze Transforms", icon='FREEZE')
            box.operator("clear.all", text="Clear All", icon='MANIPUL')
            #1 - BOTTOM - LEFT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("Object.join", text="Join", icon='FULLSCREEN_EXIT')
            box.operator("separate.looseparts", text="Separate", icon='FULLSCREEN_ENTER')
            #3 - BOTTOM - RIGHT
            pie.operator("object.delete", text="Delete", icon='CANCEL').use_global=False

            
            
            
        elif bpy.context.area.type == 'VIEW_3D' and bpy.context.object.mode == 'EDIT':    



        
            
            #4 - LEFT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("mesh.subdivide", text="Subdivide", icon='GRID').smoothness=1
            box.operator("mesh.vertices_smooth", text="Smooth", icon='UV_VERTEXSEL')
            row = box.row(align=True)
            row = box.split(percentage=0.5)
            row.operator("wm.context_toggle", text="Mirror X ").data_path = "object.data.use_mirror_x"
            row.operator("wazou.symetrize", text="Symetrize")

            #6 - RIGHT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("mesh.flip_normals", icon = 'FILE_REFRESH')
            box.operator("mesh.normals_make_consistent", icon = 'MATCUBE')
            box.operator("mesh.remove_doubles",icon='X_VEC')
            #2 - BOTTOM
            box = pie.split().column()
            row = box.row(align=True)
            #Vertex
            if tuple (bpy.context.tool_settings.mesh_select_mode) == (True, False, False):
                box.operator("merge.atcenter", text="Merge At Center", icon='AUTOMERGE_ON')
                box.operator("merge.atlast", text="Merge At Last", icon='AUTOMERGE_ON')
                box.operator("merge.atfirst", text="Merge At First", icon='AUTOMERGE_ON')
            #Edges    
            if tuple (bpy.context.tool_settings.mesh_select_mode) == (False, False, True):
                box.operator("merge.atcenter", text="Merge At Center", icon='AUTOMERGE_ON')
                box.operator("merge.atcursor", text="Merge At Cursor", icon='AUTOMERGE_ON')
                box.operator("merge.collapse", text="Collapse", icon='AUTOMERGE_ON')
            #Faces
            if tuple (bpy.context.tool_settings.mesh_select_mode) == (False, True, False):
                box.operator("merge.atcenter", text="Merge At Center", icon='AUTOMERGE_ON')
                box.operator("merge.atcursor", text="At Cursor", icon='AUTOMERGE_ON')
                box.operator("merge.collapse", text="Collapse", icon='AUTOMERGE_ON')
            #Vertex - Edges - Faces
            if tuple (bpy.context.tool_settings.mesh_select_mode) == (True, True, True):
                box.operator("merge.atlast", text="Merge At Last", icon='AUTOMERGE_ON')
                box.operator("merge.atfirst", text="Merge At First", icon='AUTOMERGE_ON')
                box.operator("merge.atcenter", text="Merge At Center", icon='AUTOMERGE_ON')
                box.operator("merge.atcursor", text="Merge At Cursor", icon='AUTOMERGE_ON')
                box.operator("merge.collapse", text="Collapse", icon='AUTOMERGE_ON') 
            #Vertex - Edges
            if tuple (bpy.context.tool_settings.mesh_select_mode) == (True, True, False):
                box.operator("merge.atlast", text="Merge At Last", icon='AUTOMERGE_ON')
                box.operator("merge.atfirst", text="Merge At First", icon='AUTOMERGE_ON')
                box.operator("merge.atcenter", text="Merge At Center", icon='AUTOMERGE_ON')
                box.operator("merge.atcursor", text="Merge At Cursor", icon='AUTOMERGE_ON')
                box.operator("merge.collapse", text="Collapse", icon='AUTOMERGE_ON')  
            #Vertex - Faces
            if tuple (bpy.context.tool_settings.mesh_select_mode) == (True, False, True):
                box.operator("merge.atlast", text="Merge At Last", icon='AUTOMERGE_ON')
                box.operator("merge.atfirst", text="Merge At First", icon='AUTOMERGE_ON')
                box.operator("merge.atcenter", text="Merge At Center", icon='AUTOMERGE_ON')
                box.operator("merge.atcursor", text="Merge At Cursor", icon='AUTOMERGE_ON')
                box.operator("merge.collapse", text="Collapse", icon='AUTOMERGE_ON') 
            #Edges - Faces
            if tuple (bpy.context.tool_settings.mesh_select_mode) == (False, True, True):
                box.operator("merge.atlast", text="Merge At Last", icon='AUTOMERGE_ON')
                box.operator("merge.atfirst", text="Merge At First", icon='AUTOMERGE_ON')
                box.operator("merge.atcenter", text="Merge At Center", icon='AUTOMERGE_ON')
                box.operator("merge.atcursor", text="Merge At Cursor", icon='AUTOMERGE_ON')
                box.operator("merge.collapse", text="Collapse", icon='AUTOMERGE_ON')        
            
            
            #8 - TOP
            pie.operator("screen.redo_last", text="F6", icon='SCRIPTWIN')
            #7 - TOP - LEFT 
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("mesh.loopcut", text="Loopcut", icon='EDIT_VEC').smoothness=1
            box.operator("mesh.inset",text="Inset", icon='EDIT_VEC').use_select_inset=False
            box.operator("mesh.bevel",text="Bevel", icon='MOD_BEVEL')
            #9 - TOP - RIGHT
            box = pie.split().column()
            row = box.row(align=True)
            box.menu("loop.tools")
            box.operator("mesh.poke", text="Poke Faces")
            box.operator("mesh.fill_grid", text="Grid Fill")
            #1 - BOTTOM - LEFT
            box = pie.split().column()
            row = box.split(percentage=0.5)
            row.operator("add.mirroredit", text="Add Mirror", icon='MOD_MIRROR')
            row.operator("object.automirror", icon = 'MOD_MIRROR')
            row = box.row(align=True)
            row = box.split(percentage=0.5)
            row.operator("apply.mirroredit", text="Apply Mirror", icon='MOD_MIRROR')
            row.operator("object.modifier_remove", text="Del Mirror", icon='X_VEC').modifier="Mirror"
            #3 - BOTTOM - RIGHT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("object.subsurf2", text="Subdiv Level 2", icon='MESH_UVSPHERE')
            box.operator("remove.subsurf", text="Remove Subsurf", icon='X')
            box.operator("mesh.separate")
            
        elif bpy.context.area.type == 'VIEW_3D' and bpy.context.object.mode == 'SCULPT':
            
            
            #4 - LEFT
            pie.operator("enable.dyntopo", text="Enable Dyntopo", icon='LINE_DATA')
            #6 - RIGHT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("sculpt.optimize", text="Optimize")
            box.operator("sculpt.detail_flood_fill", text="Detail flood Fill")
            box.operator("sculpt.symmetrizeplusx", text="Symmetrize +X to -X")
            box.operator("sculpt.symmetrizemoinsx", text="Symmetrize -X to +X")
            #2 - BOTTOM
            pie.operator("wm.context_toggle", text="X Symetry", icon='MOD_MIRROR').use_symmetry_x = True
            #8 - TOP
            

            #7 - TOP - LEFT 
            
            #9 - TOP - RIGHT
            
            #1 - BOTTOM - LEFT
            
            #3 - BOTTOM - RIGHT
            
#Enable Dyntopo
class EnableDyntopo(bpy.types.Operator):  
    bl_idname = "enable.dyntopo"  
    bl_label = "Enable Dyntopo" 
    
    def execute(self, context):
        bpy.ops.sculpt.dynamic_topology_toggle()
        bpy.context.scene.tool_settings.sculpt.detail_refine_method = 'SUBDIVIDE_COLLAPSE'
        bpy.context.scene.tool_settings.sculpt.detail_type_method = 'CONSTANT'
        bpy.context.scene.tool_settings.sculpt.use_smooth_shading = True
        return {'FINISHED'} 

#Sculpt Symmetrize +X to -X
class SculptSymmetrizePlusX(bpy.types.Operator):  
    bl_idname = "sculpt.symmetrizeplusx"  
    bl_label = "Sculpt Symmetrize +X to -X" 
    
    def execute(self, context):
        bpy.ops.sculpt.symmetrize()
        if bpy.context.scene.tool_settings.sculpt.symmetrize_direction ==  'NEGATIVE_X' :
            bpy.context.scene.tool_settings.sculpt.symmetrize_direction = 'POSITIVE_X'
        return {'FINISHED'}     

#Sculpt Symmetrize -X to +X
class SculptSymmetrizeMoinsX(bpy.types.Operator):  
    bl_idname = "sculpt.symmetrizemoinsx"  
    bl_label = "Sculpt Symmetrize - X to + X" 
    
    def execute(self, context):
        bpy.ops.sculpt.symmetrize()
        if bpy.context.scene.tool_settings.sculpt.symmetrize_direction ==  'POSITIVE_X' :
            bpy.context.scene.tool_settings.sculpt.symmetrize_direction = 'NEGATIVE_X'
        return {'FINISHED'} 
    


addon_keymaps = []
def register():
    bpy.utils.register_class(View3dRightClicMenu)
    bpy.utils.register_class(WazouRightMenuPiePrefs)
    #Object
    bpy.utils.register_class(AddMenu)
    bpy.utils.register_class(SubSurf2)
    bpy.utils.register_class(RemoveSubsurf)
    bpy.utils.register_class(AddMirrorObject)
    bpy.utils.register_class(VIEW3D_MT_edit_mesh_looptools)
    bpy.utils.register_class(ApplyTransformAll)
    bpy.utils.register_class(DeleteModifiers)
    bpy.utils.register_class(ClearAll)
    bpy.utils.register_class(SeparateLooseParts)
    #Edit
    bpy.utils.register_class(AddMirrorEdit)
    bpy.utils.register_class(ApplyMirrorEdit)
    bpy.utils.register_class(MergeAtCursor)
    bpy.utils.register_class(MergeAtFirst)
    bpy.utils.register_class(MergeAtCenter)
    bpy.utils.register_class(MergeCollapse)
    bpy.utils.register_class(MergeAtLast)
    bpy.utils.register_class(WazouSymetrize)
    #Sculpt
    bpy.utils.register_class(EnableDyntopo)
    bpy.utils.register_class(SculptSymmetrizePlusX)
    bpy.utils.register_class(SculptSymmetrizeMoinsX)
    
    
    
# Keympa Config   
    
    wm = bpy.context.window_manager
    
    if wm.keyconfigs.addon:
        
        #Right Clic
        km = wm.keyconfigs.addon.keymaps.new(name = '3D View Generic', space_type = 'VIEW_3D')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'RIGHTMOUSE', 'PRESS').properties.name = "pie.rightclicmenu"  
        
def unregister():
    bpy.utils.unregister_class(View3dRightClicMenu)
    bpy.utils.unregister_class(WazouRightMenuPiePrefs)
    #Object
    bpy.utils.unregister_class(AddMenu)
    bpy.utils.unregister_class(SubSurf2)
    bpy.utils.unregister_class(RemoveSubsurf)
    bpy.utils.unregister_class(AddMirrorObject)
    bpy.utils.unregister_class(VIEW3D_MT_edit_mesh_looptools)
    bpy.utils.unregister_class(ApplyTransformAll)
    bpy.utils.unregister_class(DeleteModifiers)
    bpy.utils.unregister_class(ClearAll)
    bpy.utils.unregister_class(SeparateLooseParts)
    #Edit
    bpy.utils.unregister_class(AddMirrorEdit)
    bpy.utils.unregister_class(ApplyMirrorEdit)
    bpy.utils.unregister_class(MergeAtCursor)
    bpy.utils.unregister_class(MergeAtFirst)
    bpy.utils.unregister_class(MergeAtCenter)
    bpy.utils.unregister_class(MergeCollapse)
    bpy.utils.unregister_class(MergeAtLast)
    bpy.utils.unregister_class(WazouSymetrize)
    #Sculpt
    bpy.utils.unregister_class(EnableDyntopo)
    bpy.utils.unregister_class(SculptSymmetrizePlusX)
    bpy.utils.unregister_class(SculptSymmetrizeMoinsX)
    
    
if __name__ == "__main__":
    register()

    #bpy.ops.wm.call_menu_pie(name="View3dRightClicMenu")


