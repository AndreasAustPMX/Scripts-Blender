# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####

bl_info = {
    "name": "Wazou Right clic Pie",
    "author": "Cédric Lepiller",
    "version": (0, 1, 0),
    "blender": (2, 7, 1),
    "location": "View3D > RMB",
    "description": "Right Click Pie Menu",
    "category": "3D View"}

"""
Right Click Pie Menu
This adds a the Right Click Pie Menu in the View3D.
Left mouse is SELECTION.
Left shift Double click sets the 3D cursor.

"""

import bpy
from bpy.types import Menu
from bpy.props import IntProperty, FloatProperty, BoolProperty

########################
#      Properties      #               
########################

class WazouRightMenuPiePrefs(bpy.types.AddonPreferences):
    """Creates the tools in a Panel, in the scene context of the properties editor"""
    bl_idname = __name__

    bpy.types.Scene.Enable_Tab_RMB_01 = bpy.props.BoolProperty(default=False)
    bpy.types.Scene.Enable_Tab_RMB_02 = bpy.props.BoolProperty(default=False)
    
    def draw(self, context):
        layout = self.layout
        
        layout.prop(context.scene, "Enable_Tab_RMB_01", text="Shortcuts", icon="QUESTION")  
        if context.scene.Enable_Tab_RMB_01:
            row = layout.row()
            layout.label(text="– Object/Edit mode > RMB")
            layout.label(text="– Cusor > Alt + double clic")
        
        layout.prop(context.scene, "Enable_Tab_RMB_02", text="URL's", icon="URL") 
        if context.scene.Enable_Tab_RMB_02:
            row = layout.row()    
            
            row.operator("wm.url_open", text="Pitiwazou.com").url = "http://www.pitiwazou.com/"
            row.operator("wm.url_open", text="Wazou's Ghitub").url = "https://github.com/pitiwazou/Scripts-Blender"
            row.operator("wm.url_open", text="BlenderLounge Forum ").url = "http://blenderlounge.fr/forum/"      
            
#######################
#       Classes       #               
#######################

# Add Mesh #
class AddMenu(bpy.types.Menu):
    bl_label = "Add Mesh"
    
    def draw(self, context):
        layout = self.layout
        
        layout.operator("mesh.primitive_cube_add", text="Cube", icon='MESH_CUBE')
        layout.operator("mesh.primitive_plane_add", text="Plane", icon='MESH_PLANE')
        layout.operator("mesh.primitive_uv_sphere_add", text="UV Sphere", icon='MESH_UVSPHERE')
        layout.operator("mesh.primitive_cylinder_add", text="Cylinder", icon='MESH_CYLINDER')
        layout.operator("mesh.primitive_grid_add", text="Grid", icon='MESH_GRID')
        layout.operator("mesh.primitive_ico_sphere_add", text="Ico Sphere", icon='MESH_ICOSPHERE')
        layout.operator("mesh.primitive_circle_add", text="Circle", icon='MESH_CIRCLE')
        layout.operator("mesh.primitive_cone_add", text="Cone", icon='MESH_CONE')
        layout.operator("mesh.primitive_torus_add", text="Torus", icon='MESH_TORUS')
        layout.operator("mesh.primitive_monkey_add", text="Monkey", icon='MESH_MONKEY')
        layout.separator()
        layout.operator("object.camera_add", icon='OUTLINER_OB_CAMERA')
        layout.separator()  
        layout.operator("object.lamp_add", text="Area", icon='LAMP_AREA').type = 'AREA'
        layout.operator("object.lamp_add", text="Sun", icon='LAMP_SUN').type = 'SUN'
        layout.operator("object.lamp_add", text="Hemi", icon='LAMP_HEMI').type = 'HEMI'
        layout.operator("object.lamp_add", text="Point", icon='LAMP_POINT').type = 'POINT'
        layout.operator("object.lamp_add", text="Spot", icon='LAMP_SPOT').type = 'SPOT'
        layout.separator()
        layout.operator("curve.primitive_bezier_circle_add", icon='CURVE_BEZCIRCLE')
        layout.operator("curve.primitive_bezier_curve_add", icon='CURVE_BEZCURVE')
        layout.operator("curve.primitive_nurbs_path_add", icon='CURVE_PATH')
        layout.separator()
        layout.operator("object.empty_add", text="Empty AXE", icon='OUTLINER_OB_EMPTY').type = 'PLAIN_AXES'
        layout.operator("object.empty_add", text="Empty CUBE", icon='OUTLINER_OB_EMPTY').type = 'CUBE'
        layout.operator("object.add", text="Lattice", icon='OUTLINER_OB_LATTICE').type = 'LATTICE'
        layout.operator("object.text_add", text="Text", icon='OUTLINER_OB_FONT')
        layout.operator("object.armature_add", text="Armature", icon='OUTLINER_OB_ARMATURE')

#Subsurf 2
class SubSurf2(bpy.types.Operator):  
    bl_idname = "object.subsurf2"  
    bl_label = "SubSurf 2"  
  
    def execute(self, context):
        bpy.ops.object.subdivision_set(level=2)
        bpy.context.object.modifiers["Subsurf"].show_only_control_edges = True
        
        if bpy.context.object.mode == "EDIT":
            bpy.context.object.modifiers["Subsurf"].show_on_cage = True

            bpy.ops.object.mode_set(mode = 'EDIT')
        return {'FINISHED'} 

#Subsurf 0
class SubSurf0(bpy.types.Operator):  
    bl_idname = "object.subsurf0"  
    bl_label = "SubSurf 0"  
  
    def execute(self, context):
        bpy.ops.object.subdivision_set(level=0)
        bpy.context.object.modifiers["Subsurf"].show_only_control_edges = True
        
        
        return {'FINISHED'}     

#Add Mirror Object
class AddMirrorObject(bpy.types.Operator):  
    bl_idname = "add.mirrorobject"  
    bl_label = "Add Mirror Object"  
  
    def execute(self, context):
        bpy.ops.object.modifier_add(type='MIRROR')
        bpy.context.object.modifiers["Mirror"].use_clip = True
        return {'FINISHED'}  
    
#Add Mirror Edit
class AddMirrorEdit(bpy.types.Operator):  
    bl_idname = "add.mirroredit"  
    bl_label = "Add Mirror Edit"  
  
    def execute(self, context):
        bpy.ops.object.modifier_add(type='MIRROR')
        bpy.context.object.modifiers["Mirror"].use_clip = True
        bpy.context.object.modifiers["Mirror"].show_on_cage = True
        return {'FINISHED'}       
      
######################
#        Pies        #               
######################            
class View3dRightClicMenu(Menu):
    bl_idname = "pie.rightclicmenu"
    bl_label = "Right Clic Menu"

    def draw(self, context):
        layout = self.layout

        pie = layout.menu_pie()
        ob = context
        
        if ob.mode == 'OBJECT':
            
            #4 - LEFT
            pie.operator("object.subsurf0", text="Subdiv Level 0", icon='MESH_ICOSPHERE')
            #6 - RIGHT
            pie.operator("object.subsurf2", text="Subdiv Level 2", icon='MESH_UVSPHERE')
            #2 - BOTTOM
            pie.menu("AddMenu", text="Add Objects", icon="OBJECT_DATA")
            #8 - TOP
            pie.operator("screen.redo_last", text="F6", icon='SCRIPTWIN')
            #7 - TOP - LEFT 
            pie.operator("object.modifier_remove", text="Remove Mirror", icon='X_VEC').modifier="Mirror"
            #9 - TOP - RIGHT
            pie.operator("add.mirrorobject", text="Add Mirror", icon='MOD_MIRROR')
            #1 - BOTTOM - LEFT
            pie.operator("object.modifier_apply", text="Apply Subsurf", icon='MOD_SUBSURF').modifier="Subsurf"
            #3 - BOTTOM - RIGHT
            pie.operator("object.modifier_apply", text="Apply Mirror", icon='MOD_MIRROR').modifier="Mirror"
            
        elif ob.mode == 'EDIT_MESH':
            
            #4 - LEFT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("mesh.flip_normals", icon = 'FULLSCREEN_ENTER')
            box.operator("mesh.normals_make_consistent", icon = 'MATCUBE')
            box.operator("mesh.remove_doubles",icon='X_VEC')
            #6 - RIGHT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("mesh.merge", text="Merge At Center", icon='AUTOMERGE_ON').type="CENTER"
            box.operator("mesh.merge", text="Merge At Last", icon='AUTOMERGE_ON').type="LAST"
            box.operator("mesh.merge", text="Merge At First", icon='AUTOMERGE_ON').type="FIRST"
            #2 - BOTTOM
            pie.operator("wm.context_toggle", text="X mirror", icon='X_VEC').data_path = "object.data.use_mirror_x"
            #8 - TOP
            pie.operator("screen.redo_last", text="F6", icon='SCRIPTWIN')
            #7 - TOP - LEFT 
            pie.operator("mesh.loopcut", text="Loopcut", icon='EDIT_VEC').smoothness=1
            #9 - TOP - RIGHT
            pie.operator("mesh.inset",text="Inset", icon='EDIT_VEC').use_select_inset=False
            #1 - BOTTOM - LEFT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("add.mirroredit", text="Add Mirror", icon='MOD_MIRROR')
            box.operator("object.modifier_remove", text="Remove Mirror", icon='X_VEC').modifier="Mirror"
            #3 - BOTTOM - RIGHT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("object.subsurf2", text="Subdiv Level 2", icon='MESH_UVSPHERE')
            box.operator("object.subsurf0", text="Subdiv Level 0", icon='MESH_ICOSPHERE')

addon_keymaps = []
def register():
    bpy.utils.register_class(View3dRightClicMenu)
    bpy.utils.register_class(AddMenu)
    bpy.utils.register_class(SubSurf2)
    bpy.utils.register_class(SubSurf0)
    bpy.utils.register_class(AddMirrorObject)
    bpy.utils.register_class(AddMirrorEdit)
    bpy.utils.register_class(WazouRightMenuPiePrefs)
    
# Keympa Config   
    
    wm = bpy.context.window_manager
    
    if wm.keyconfigs.addon:
        
        #Right Clic
        km = wm.keyconfigs.addon.keymaps.new(name = '3D View Generic', space_type = 'VIEW_3D')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'RIGHTMOUSE', 'PRESS').properties.name = "pie.rightclicmenu"  
    

def unregister():
    bpy.utils.unregister_class(View3dRightClicMenu)
    bpy.utils.unregister_class(AddMenu)
    bpy.utils.unregister_class(SubSurf2)
    bpy.utils.unregister_class(SubSurf0)
    bpy.utils.unregister_class(AddMirrorObject)
    bpy.utils.unregister_class(AddMirrorEdit)
    bpy.utils.unregister_class(WazouRightMenuPiePrefs)
    
    
    
if __name__ == "__main__":
    register()

    #bpy.ops.wm.call_menu_pie(name="View3dRightClicMenu")



