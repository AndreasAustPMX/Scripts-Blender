bl_info = {
        "name": "clicdroitMenu",
        "category": "3D View",
        "author": "Cedric_Lepiller"
        }  


import bpy

class SimpleOperatorSnap(bpy.types.Operator):
    bl_idname = "object.simple_operator_snap"
    bl_label = "Simple Object Operator Snap"
    variable = bpy.props.StringProperty()

    @classmethod
    def poll(cls, context):
        return True

    def execute(self, context):
        bpy.context.tool_settings.snap_element=self.variable
        return {'FINISHED'}    
        

class customMenu(bpy.types.Menu):
    bl_label = ""
    bl_idname = "View3D.clicdroitMenu"
 
    
    def draw(self, context):
        layout = self.layout
        
        layout.operator("mesh.select_mode", text="Vertex", icon='VERTEXSEL').type = 'VERT'
        layout.operator("mesh.select_mode", text="Edge", icon='EDGESEL').type = 'EDGE'
        layout.operator("mesh.select_mode", text="Face", icon='FACESEL').type = 'FACE'
        
        layout.separator()
        
        layout.menu("merge", text="Merge", icon='AUTOMERGE_ON')
        
        #layout.menu("Apply", text="Cursor", icon='EDITMODE_HLT')
        layout.menu("cursor", text="Cursor/Origin", icon='CURSOR')
        
        layout.separator()
        
        props = layout.operator("object.transform_apply", text="Freeze Transforms", icon='FREEZE')
        props.location, props.rotation, props.scale = True, True, True
        
        layout.menu("multiselect", text="Multi Selection", icon='EDITMODE_HLT')
        layout.menu("Snap", text="Snap elements", icon='SNAP_INCREMENT')
        
class Snap(bpy.types.Menu):
    bl_label = "merge"
    
    
    def draw(self, context):
        layout = self.layout          
        
        layout.operator("object.simple_operator_snap", text="Face", icon= 'SNAP_FACE').variable="FACE"
        layout.operator("object.simple_operator_snap", text="Vertex", icon= 'SNAP_VERTEX').variable="VERTEX"
        layout.operator("object.simple_operator_snap", text="Edge", icon= 'SNAP_EDGE').variable="EDGE"
        layout.operator("object.simple_operator_snap", text="Increment", icon= 'SNAP_INCREMENT').variable="INCREMENT"
        layout.operator("object.simple_operator_snap", text="Volume", icon= 'SNAP_VOLUME').variable="VOLUME"

bpy.utils.register_class(Snap)         
        
class merge(bpy.types.Menu):
    bl_label = "merge"
    
    
    def draw(self, context):
        layout = self.layout     
          
        layout.operator("mesh.merge", text="At Center").type = 'CENTER'
        layout.operator("mesh.merge", text="At Last").type = 'LAST'
        layout.operator("mesh.merge", text="At First").type = 'FIRST'

bpy.utils.register_class(merge)        
      

      
class multiselect(bpy.types.Menu):
    bl_label = "multiselect"
    
    
    def draw(self, context):
        layout = self.layout
        layout.operator_context = 'INVOKE_REGION_WIN'

        prop = layout.operator("wm.context_set_value",
            text="Vertex & Edge Select", icon='EDITMODE_HLT')
        prop.value = "(True, True, False)"
        prop.data_path = "tool_settings.mesh_select_mode"

        prop = layout.operator("wm.context_set_value",
            text="Vertex & Face Select", icon='ORTHO')
        prop.value = "(True, False, True)"
        prop.data_path = "tool_settings.mesh_select_mode"

        prop = layout.operator("wm.context_set_value",
            text="Edge & Face Select", icon='SNAP_FACE')
        prop.value = "(False, True, True)"
        prop.data_path = "tool_settings.mesh_select_mode"
        layout.separator()

        prop = layout.operator("wm.context_set_value",
            text="Vertex & Edge & Face Select", icon='SNAP_VOLUME')
        prop.value = "(True, True, True)"
        prop.data_path = "tool_settings.mesh_select_mode"
           
bpy.utils.register_class(multiselect)

class cursor(bpy.types.Menu):
    bl_label = "Cursor"

    def draw(self, context):
        layout = self.layout

        
        layout.operator("view3d.snap_selected_to_cursor", text="Selection to Cursor").use_offset = False
        layout.operator("view3d.snap_cursor_to_selected", text="Cursor to Selected")

        layout.separator()
        
        layout.operator("object.origin_set", text="Origin to Geometry").type = 'ORIGIN_GEOMETRY'
        layout.operator("object.origin_set", text="Origin to 3D Cursor").type = 'ORIGIN_CURSOR'

bpy.utils.register_class(cursor)     
      
def register():
    bpy.utils.register_class(SimpleOperatorSnap)
    bpy.utils.register_class(customMenu)
    #bpy.ops.wm.call_menu(name=customMenu.bl_idname)

def unregister():
    bpy.utils.unregister_class(SimpleOperatorSnap)
    bpy.utils.unregister_class(customMenu)  

if __name__ == "__main__":     register()

