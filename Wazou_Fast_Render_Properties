# ##### BEGIN GPL LICENSE BLOCK #####

#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####

bl_info = {
    "name": "Fast Render Properties",
    "description": 'A compilation of usefull properties for rendering',
    "author": "Cedric Lepiller",
    "version": (0, 1, 0),
    "blender": (2, 72, 0),
    "location": "See below",
    "warning": "",
    "wiki_url": "",
    "tracker_url": "",
    "category": "Render"}

import bpy
from bpy.types import Panel, Menu


class CyclesButtonsPanel():
    bl_space_type = "PROPERTIES"
    bl_region_type = "WINDOW"
    bl_context = "render"
    COMPAT_ENGINES = {'CYCLES'}


class RENDER_MT_framerate_presets(Menu):
    bl_label = "Frame Rate Presets"
    preset_subdir = "framerate"
    preset_operator = "script.execute_preset"
    draw = Menu.draw_preset



class FRProperties(CyclesButtonsPanel, Panel):
    
    bl_label = "Fast Render Properties"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        cscene = scene.cycles
        ob = bpy.context.object
        obj = context.object
        rd = context.scene.render

############################################################
############################################################
        #Feature, Device, CG
        system = context.user_preferences.system
        layout.prop(system, "compute_device", text="")

############################################################
############################################################
        #Dimensions
        layout.label("Dimensions :", icon='SCENE')
        rd = scene.render   
        split = layout.split()
        col = split.column()
        sub = col.column(align=True)
        
        sub.label(text="Resolution:")
        sub.prop(rd, "resolution_x", text="X")
        sub.prop(rd, "resolution_y", text="Y")
        sub.prop(rd, "resolution_percentage", text="")      
        
        col = split.column()
        sub = col.column(align=True)
        sub.label(text="Frame Range:")
        sub.prop(scene, "frame_start")
        sub.prop(scene, "frame_end")
        sub.prop(scene, "frame_step") 
        
        #Tiles
        row = layout.row(align=True)
        #row.label("Tiles")
        row.prop(rd, "tile_x", text="Tile X")
        row.prop(rd, "tile_y", text="Tile Y") 
        
        row = layout.row()
        row.prop(rd, "use_border", text="Border")
        row.menu("RENDER_MT_framerate_presets", text="Frame Rate")
        
        
        row = layout.row()
        row.prop(cscene, "film_transparent")
        row.prop(rd, "use_border", text="Border")
        row = layout.split(percentage= 0.49)
        row.prop(rd, "use_motion_blur", text="Motion Blur")
        row.prop(rd, "motion_blur_shutter", text="Shutter")

############################################################
############################################################
        #Sampling        
        layout.label("Sampling", icon='UV_VERTEXSEL')
        split = layout.split()
        
        col = split.column()
        sub = col.column(align=True)
        sub.label("Sampling Settings:")
        sub.prop(cscene, "seed")
        sub.prop(cscene, "sample_clamp_direct")
        sub.prop(cscene, "sample_clamp_indirect")
        
        col = split.column()
        sub = col.column(align=True)
        sub.label(text="Sampling Samples:")
        sub.prop(cscene, "samples", text="Render")
        sub.prop(cscene, "preview_samples", text="Preview")
        
############################################################        
############################################################        
        #Light Path
        layout.label("Light Path :", icon='LAMP_DATA')
        
        scene = context.scene
        cscene = scene.cycles

        
        split = layout.split()
        col = split.column()
        sub = col.column(align=True)
        sub.label("Transparency:")
        sub.prop(cscene, "transparent_max_bounces", text="Max")
        sub.prop(cscene, "transparent_min_bounces", text="Min")
        sub.prop(cscene, "use_transparent_shadows", text="Shadows")

        col.separator()

        col.prop(cscene, "caustics_reflective", text="Refle Caustics")
        col.prop(cscene, "caustics_refractive", text="Refra Caustics")
        col.prop(cscene, "blur_glossy")

        col = split.column()

        sub = col.column(align=True)
        sub.label(text="Bounces:")
        sub.prop(cscene, "max_bounces", text="Max")
        sub.prop(cscene, "min_bounces", text="Min")

        sub = col.column(align=True)
        sub.prop(cscene, "diffuse_bounces", text="Diffuse")
        sub.prop(cscene, "glossy_bounces", text="Glossy")
        sub.prop(cscene, "transmission_bounces", text="Transmission")
        sub.prop(cscene, "volume_bounces", text="Volume")
     
############################################################
############################################################        
        #Output
        layout.label("Output :", icon='FILE_IMAGE')
        
        image_settings = rd.image_settings
        file_format = image_settings.file_format
        
        row = layout.row()
        row.prop(rd, "filepath", text="")

        split = layout.split()

        col = split.column()
        col.active = not rd.is_movie_format
        col.prop(rd, "use_overwrite")
        col.prop(rd, "use_placeholder")

        col = split.column()
        col.prop(rd, "use_file_extension")
        col.prop(rd, "use_render_cache")
        
        row = layout.row()
        row.template_image_settings(image_settings, color_management=False)

        if file_format == 'QUICKTIME':
            quicktime = rd.quicktime

            split = layout.split()
            col = split.column()
            col.prop(quicktime, "codec_type", text="Video Codec")
            col.prop(quicktime, "codec_spatial_quality", text="Quality")

            # Audio
            col.prop(quicktime, "audiocodec_type", text="Audio Codec")
            if quicktime.audiocodec_type != 'No audio':
                split = layout.split()
                if quicktime.audiocodec_type == 'LPCM':
                    split.prop(quicktime, "audio_bitdepth", text="")

                split.prop(quicktime, "audio_samplerate", text="")

                split = layout.split()
                col = split.column()
                if quicktime.audiocodec_type == 'AAC':
                    col.prop(quicktime, "audio_bitrate")

                subsplit = split.split()
                col = subsplit.column()

                if quicktime.audiocodec_type == 'AAC':
                    col.prop(quicktime, "audio_codec_isvbr")

                col = subsplit.column()
                col.prop(quicktime, "audio_resampling_hq")
        
        #Encoding
        enc = {'H264', 'XVID'}
        if file_format in {'H264'} :
            row = layout.row()
            row.label("Encoding")
            
            ffmpeg = rd.ffmpeg
            
            row = layout.row()
            row.menu("RENDER_MT_ffmpeg_presets", text="Presets")
            row = layout.row()
            split = row.split()
            split.prop(rd.ffmpeg, "format")
            if ffmpeg.format in {'AVI', 'QUICKTIME', 'MKV', 'OGG'}:
                split.prop(ffmpeg, "codec")
            elif rd.ffmpeg.format == 'H264':
                split.prop(ffmpeg, "use_lossless_output")
            else:
                split.label()
            
            row = layout.row()
            row.prop(ffmpeg, "video_bitrate")
            row.prop(ffmpeg, "gopsize")

            split = layout.split()
            row = layout.row()
            col = row.column()
            col.label(text="Rate:")
            col.prop(ffmpeg, "minrate", text="Minimum")
            col.prop(ffmpeg, "maxrate", text="Maximum")
            col.prop(ffmpeg, "buffersize", text="Buffer")

            col = row.column()
            col.prop(ffmpeg, "use_autosplit")
            col.label(text="Mux:")
            col.prop(ffmpeg, "muxrate", text="Rate")
            col.prop(ffmpeg, "packetsize", text="Packet Size")
            
            row = layout.row()
            row.separator()

            # Audio:
            if ffmpeg.format != 'MP3':
                row.prop(ffmpeg, "audio_codec", text="Audio Codec")

            row = box.row()
            row.prop(ffmpeg, "audio_bitrate")
            row.prop(ffmpeg, "audio_volume", slider=True)
        else:
            row.label("toto")
          
         

def register():
    bpy.utils.register_class(FRProperties) 
    

def unregister():
    bpy.utils.unregister_class(FRProperties)  
    
if __name__ == "__main__":
    register()
