bl_info = {
        "name": "Views_Custom_Menu",
        "category": "3D View",
        "author": "Cedric_Lepiller & DoubleZ"
        }  

import bpy

class SimpleOperator(bpy.types.Operator):
    """Tooltip"""
    bl_idname = "object.simple_operator"
    bl_label = "Simple Object Operator"
    variable = bpy.props.StringProperty()

    @classmethod
    def poll(cls, context):
        return True

    def execute(self, context):
        bpy.context.area.type=self.variable
        return {'FINISHED'}    

    
class ViewCustomMenu(bpy.types.Menu):
    bl_label = ""
    bl_idname = "View_Custom_Menu"
 
    
    def draw(self, context):
        layout = self.layout
        
        
        layout.operator("object.simple_operator", text="VIEW_3D", icon= 'VIEW3D').variable="VIEW_3D"
        layout.operator("object.simple_operator", text="Node_Editor", icon= 'NODETREE').variable="NODE_EDITOR"
        layout.operator("object.simple_operator", text="Image Editor", icon= 'IMAGE_COL').variable="IMAGE_EDITOR"
        layout.operator("object.simple_operator", text="Outliner", icon= 'OOPS').variable="OUTLINER"
        layout.operator("object.simple_operator", text="Graph Editor", icon= 'IPO').variable="GRAPH_EDITOR"
        layout.operator("object.simple_operator", text="Dope Sheet", icon= 'ACTION').variable="DOPESHEET_EDITOR"
        layout.operator("object.simple_operator", text="Properties", icon= 'BUTS').variable="PROPERTIES"
        layout.operator("object.simple_operator", text="Timeline", icon= 'TIME').variable="TIMELINE"
        layout.operator("object.simple_operator", text="NLA Editor", icon= 'NLA').variable="NLA_EDITOR"
        layout.operator("object.simple_operator", text="Texte editor", icon= 'TEXT').variable="TEXT_EDITOR"
        
        layout.separator()
        
        layout.operator("screen.area_split", text="Split Horizontal", icon= 'TRIA_DOWN').direction="HORIZONTAL"
        layout.operator("screen.area_split", text="Split Vertical", icon= 'TRIA_RIGHT').direction="VERTICAL"
        
     
     
def register():
    bpy.utils.register_class(SimpleOperator)
    bpy.utils.register_class(ViewCustomMenu)
    #bpy.ops.wm.call_menu(name=View_Custom_Menu.bl_idname)


def unregister():
    bpy.utils.unregister_class(SimpleOperator)
    bpy.utils.unregister_class(ViewCustomMenu)  


if __name__ == "__main__":     register()
