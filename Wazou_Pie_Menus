# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####

bl_info = {
    "name": "Wazou_Pie_Menus",
    "author": "CÃ©dric Lepiller & DavideDozza & Lapineige",
    "version": (0, 1, 3),
    "blender": (2, 71, 4),
    "description": "Custom Pie Menus",
    "category": "3D View",}
    
import bpy
from bpy.types import Menu   
from bpy.props import IntProperty, FloatProperty, BoolProperty

######################
#      Snapping      #               
######################
class SnapActive(bpy.types.Operator):
    bl_idname = "snap.active"
    bl_label = "Snap Active"
    
    def execute(self, context):
        layout = self.layout 
        
        if bpy.context.scene.tool_settings.use_snap == (True):
            bpy.context.scene.tool_settings.use_snap = False
            
        elif bpy.context.scene.tool_settings.use_snap == (False) :
             bpy.context.scene.tool_settings.use_snap = True

        return {'FINISHED'}


class SnapVolume(bpy.types.Operator):
    bl_idname = "snap.volume"
    bl_label = "Snap Volume"
    
    def execute(self, context):
        layout = self.layout
        if bpy.context.scene.tool_settings.use_snap == (False) : 
            bpy.context.scene.tool_settings.use_snap = True
            bpy.context.scene.tool_settings.snap_element = 'VOLUME'
            
        if bpy.context.scene.tool_settings.snap_element != 'VOLUME': 
            bpy.context.scene.tool_settings.snap_element = 'VOLUME' 
        return {'FINISHED'}    

class SnapFace(bpy.types.Operator):
    bl_idname = "snap.face"
    bl_label = "Snap Face"
    
    def execute(self, context):
        layout = self.layout
        if bpy.context.scene.tool_settings.use_snap == (False) : 
            bpy.context.scene.tool_settings.use_snap = True 
            bpy.context.scene.tool_settings.snap_element = 'FACE'
            
        if bpy.context.scene.tool_settings.snap_element != 'FACE': 
            bpy.context.scene.tool_settings.snap_element = 'FACE' 
        return {'FINISHED'}    

class SnapEdge(bpy.types.Operator):
    bl_idname = "snap.edge"
    bl_label = "Snap Edge"
    
    def execute(self, context):
        layout = self.layout
        if bpy.context.scene.tool_settings.use_snap == (False) : 
            bpy.context.scene.tool_settings.use_snap = True 
            bpy.context.scene.tool_settings.snap_element = 'EDGE'
        
        if bpy.context.scene.tool_settings.snap_element != 'EDGE': 
            bpy.context.scene.tool_settings.snap_element = 'EDGE' 
        return {'FINISHED'}
    
class SnapVertex(bpy.types.Operator):
    bl_idname = "snap.vertex"
    bl_label = "Snap Vertex"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.scene.tool_settings.use_snap == (False) : 
            bpy.context.scene.tool_settings.use_snap = True
            bpy.context.scene.tool_settings.snap_element = 'VERTEX'
        
        if bpy.context.scene.tool_settings.snap_element != 'VERTEX': 
            bpy.context.scene.tool_settings.snap_element = 'VERTEX' 
        return {'FINISHED'}
    
class SnapIncrement(bpy.types.Operator):
    bl_idname = "snap.increment"
    bl_label = "Snap Increment"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.scene.tool_settings.use_snap == (False) : 
            bpy.context.scene.tool_settings.use_snap = True
            bpy.context.scene.tool_settings.snap_element = 'INCREMENT'
            
        if bpy.context.scene.tool_settings.snap_element != 'INCREMENT': 
            bpy.context.scene.tool_settings.snap_element = 'INCREMENT'    
        return {'FINISHED'}  

class SnapAlignRotation(bpy.types.Operator):
    bl_idname = "snap.alignrotation"
    bl_label = "Snap Align rotation"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.scene.tool_settings.use_snap_align_rotation == (True) :
            bpy.context.scene.tool_settings.use_snap_align_rotation = False
            
        elif bpy.context.scene.tool_settings.use_snap_align_rotation == (False) :
             bpy.context.scene.tool_settings.use_snap_align_rotation = True
        
        return {'FINISHED'} 

class SnapTargetVariable(bpy.types.Operator):
    bl_idname = "object.snaptargetvariable"
    bl_label = "Snap Target Variable"
    variable = bpy.props.StringProperty()

    @classmethod
    def poll(cls, context):
        return True

    def execute(self, context):
        bpy.context.scene.tool_settings.snap_target=self.variable
        return {'FINISHED'} 
######################
#    Orientation     #               
######################

class OrientationVariable(bpy.types.Operator):
    bl_idname = "object.orientationvariable"
    bl_label = "Orientation Variable"
    variable = bpy.props.StringProperty()

    @classmethod
    def poll(cls, context):
        return True

    def execute(self, context):
        bpy.context.space_data.transform_orientation=self.variable
        return {'FINISHED'} 

######################
#    Manipulators    #               
######################
class ManipTranslate(bpy.types.Operator):
    bl_idname = "manip.translate"
    bl_label = "Manip Translate"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.space_data.show_manipulator == (False) :
            bpy.context.space_data.show_manipulator = True
            bpy.context.space_data.transform_manipulators = {'TRANSLATE'}
        if bpy.context.space_data.transform_manipulators != {'TRANSLATE'}:
            bpy.context.space_data.transform_manipulators = {'TRANSLATE'}
        return {'FINISHED'}

class ManipRotate(bpy.types.Operator):
    bl_idname = "manip.rotate"
    bl_label = "Manip Rotate"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.space_data.show_manipulator == (False) :
            bpy.context.space_data.show_manipulator = True
            bpy.context.space_data.transform_manipulators = {'ROTATE'}
        if bpy.context.space_data.transform_manipulators != {'ROTATE'}:
            bpy.context.space_data.transform_manipulators = {'ROTATE'}
        return {'FINISHED'}
    
class ManipScale(bpy.types.Operator):
    bl_idname = "manip.scale"
    bl_label = "Manip Scale"
    
    def execute(self, context):
        layout = self.layout
        if bpy.context.space_data.show_manipulator == (False) :
            bpy.context.space_data.show_manipulator = True
            bpy.context.space_data.transform_manipulators = {'SCALE'}
        if bpy.context.space_data.transform_manipulators != {'SCALE'}:
            bpy.context.space_data.transform_manipulators = {'SCALE'}
        return {'FINISHED'}

class TranslateRotate(bpy.types.Operator):
    bl_idname = "translate.rotate"
    bl_label = "Translate Rotate"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.space_data.show_manipulator == (False) :
            bpy.context.space_data.show_manipulator = True
            bpy.context.space_data.transform_manipulators = {'TRANSLATE', 'ROTATE'}
        if bpy.context.space_data.transform_manipulators != {'TRANSLATE', 'ROTATE'}:
            bpy.context.space_data.transform_manipulators = {'TRANSLATE', 'ROTATE'}
        return {'FINISHED'}
    
class TranslateScale(bpy.types.Operator):
    bl_idname = "translate.scale"
    bl_label = "Translate Scale"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.space_data.show_manipulator == (False) :
            bpy.context.space_data.show_manipulator = True
            bpy.context.space_data.transform_manipulators = {'TRANSLATE', 'SCALE'}
        if bpy.context.space_data.transform_manipulators != {'TRANSLATE', 'SCALE'}:
            bpy.context.space_data.transform_manipulators = {'TRANSLATE', 'SCALE'}
        return {'FINISHED'}

class RotateScale(bpy.types.Operator):
    bl_idname = "rotate.scale"
    bl_label = "Rotate Scale"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.space_data.show_manipulator == (False) :
            bpy.context.space_data.show_manipulator = True
            bpy.context.space_data.transform_manipulators = {'ROTATE', 'SCALE'}
        if bpy.context.space_data.transform_manipulators != {'ROTATE', 'SCALE'}:
            bpy.context.space_data.transform_manipulators = {'ROTATE', 'SCALE'}
        return {'FINISHED'}
    
class TranslateRotateScale(bpy.types.Operator):
    bl_idname = "translate.rotatescale"
    bl_label = "Translate Rotate Scale"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.space_data.show_manipulator == (False) :
            bpy.context.space_data.show_manipulator = True
            bpy.context.space_data.transform_manipulators = {'TRANSLATE', 'ROTATE', 'SCALE'}
        if bpy.context.space_data.transform_manipulators != {'TRANSLATE', 'ROTATE', 'SCALE'}:
            bpy.context.space_data.transform_manipulators = {'TRANSLATE', 'ROTATE', 'SCALE'}
        return {'FINISHED'}
        
class WManupulators(bpy.types.Operator):
    bl_idname = "w.manupulators"
    bl_label = "W Manupulators"
    
    def execute(self, context):
        layout = self.layout 
        
        if bpy.context.space_data.show_manipulator == (True):
            bpy.context.space_data.show_manipulator = False
            
        elif bpy.context.space_data.show_manipulator == (False):
             bpy.context.space_data.show_manipulator = True

        return {'FINISHED'}
    
######################
#       Sculpt       #               
######################

# Brushes Classes
class CreaseBrush(bpy.types.Operator):
    bl_idname = "crease.brush"
    bl_label = "Crease Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Crease']
        return {'FINISHED'}
    
class ClayBrush(bpy.types.Operator):
    bl_idname = "clay.brush"
    bl_label = "Clay Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Clay'] 
        return {'FINISHED'}

class InflateBrush(bpy.types.Operator):
    bl_idname = "inflate.brush"
    bl_label = "Inflate Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Inflate/Deflate'] 
        return {'FINISHED'}
    
class DrawBrush(bpy.types.Operator):
    bl_idname = "draw.brush"
    bl_label = "Draw Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Draw'] 
        return {'FINISHED'}

class GrabBrush(bpy.types.Operator):
    bl_idname = "grab.brush"
    bl_label = "Grab Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Grab'] 
        return {'FINISHED'}

class FlattenBrush(bpy.types.Operator):
    bl_idname = "flatten.brush"
    bl_label = "Flatten Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Flatten/Contrast'] 
        return {'FINISHED'}

class MaskBrush(bpy.types.Operator):
    bl_idname = "mask.brush"
    bl_label = "Mask Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Mask'] 
        return {'FINISHED'}
    
class FillBrush(bpy.types.Operator):
    bl_idname = "fill.brush"
    bl_label = "Fill Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Fill/Deepen'] 
        return {'FINISHED'}
#Sculpt menu 2
class ClayStripsBrush(bpy.types.Operator):
    bl_idname = "claystrips.brush"
    bl_label = "ClayStrips Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Clay Strips'] 
        return {'FINISHED'}
    
class BlobBrush(bpy.types.Operator):
    bl_idname = "blob.brush"
    bl_label = "Blob Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Blob'] 
        return {'FINISHED'}

class LayerBrush(bpy.types.Operator):
    bl_idname = "layer.brush"
    bl_label = "Layer Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Layer'] 
        return {'FINISHED'}

class NudgeBrush(bpy.types.Operator):
    bl_idname = "nudge.brush"
    bl_label = "Nudge Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Nudge'] 
        return {'FINISHED'}

class PinchMagnifyBrush(bpy.types.Operator):
    bl_idname = "pinchmagnify.brush"
    bl_label = "Pinch Magnify Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Pinch/Magnify'] 
        return {'FINISHED'}

class PolishBrush(bpy.types.Operator):
    bl_idname = "polish.brush"
    bl_label = "Polish Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Polish'] 
        return {'FINISHED'}

class SculptDrawBrush(bpy.types.Operator):
    bl_idname = "sculptdraw.brush"
    bl_label = "SculptDraw Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['SculptDraw'] 
        return {'FINISHED'}
    
class SmoothBrush(bpy.types.Operator):
    bl_idname = "smooth.brush"
    bl_label = "Smooth Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Smooth'] 
        return {'FINISHED'}

class SnakeHookBrush(bpy.types.Operator):
    bl_idname = "snakehook.brush"
    bl_label = "Snake Hook Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Snake Hook'] 
        return {'FINISHED'}

class ThumbBrush(bpy.types.Operator):
    bl_idname = "thumb.brush"
    bl_label = "Thumb Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Thumb'] 
        return {'FINISHED'}

class TwistBrush(bpy.types.Operator):
    bl_idname = "twist.brush"
    bl_label = "Twist Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Twist'] 
        return {'FINISHED'}

class ScrapePeaksBrush(bpy.types.Operator):
    bl_idname = "scrapepeaks.brush"
    bl_label = "Scrape/Peaks Brush"
    
    def execute(self, context):
        layout = self.layout
        bpy.context.tool_settings.sculpt.brush=bpy.data.brushes['Scrape/Peaks'] 
        return {'FINISHED'}
    
######################
#       Modes        #               
######################

# Define Class Texture Paint
class ClassTexturePaint(bpy.types.Operator):
    bl_idname = "class.pietexturepaint"
    bl_label = "Class Texture Paint"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode == "EDIT":
            bpy.ops.object.mode_set(mode="OBJECT")
            bpy.ops.paint.texture_paint_toggle()
        else:
            bpy.ops.paint.texture_paint_toggle()
        return {'FINISHED'}
        
# Define Class Weight Paint
class ClassWeightPaint(bpy.types.Operator):
    bl_idname = "class.pieweightpaint"
    bl_label = "Class Weight Paint"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode == "EDIT":
            bpy.ops.object.mode_set(mode="OBJECT")
            bpy.ops.paint.weight_paint_toggle()
        else:
            bpy.ops.paint.weight_paint_toggle()
        return {'FINISHED'}
    
# Define Class Vertex Paint
class ClassVertexPaint(bpy.types.Operator):
    bl_idname = "class.pievertexpaint"
    bl_label = "Class Vertex Paint"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode == "EDIT":
            bpy.ops.object.mode_set(mode="OBJECT")
            bpy.ops.paint.vertex_paint_toggle()
        else:
            bpy.ops.paint.vertex_paint_toggle()
        return {'FINISHED'}

# Define Class Object Mode
class ClassObject(bpy.types.Operator):
    bl_idname = "class.object"
    bl_label = "Class Object"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode == "OBJECT":
            bpy.ops.object.mode_set(mode="EDIT")
        else:
            bpy.ops.object.mode_set(mode="OBJECT") 
        return {'FINISHED'}

# Define Class Vertex
class ClassVertex(bpy.types.Operator):
    bl_idname = "class.vertex"
    bl_label = "Class Vertex"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='VERT')
        if bpy.ops.mesh.select_mode != "EDGE, FACE":
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='VERT') 
            return {'FINISHED'}

# Define Class Edge
class ClassEdge(bpy.types.Operator):
    bl_idname = "class.edge"
    bl_label = "Class Edge"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='EDGE')
        if bpy.ops.mesh.select_mode != "VERT, FACE":
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='EDGE') 
            return {'FINISHED'}

# Define Class Face
class ClassFace(bpy.types.Operator):
    bl_idname = "class.face"
    bl_label = "Class Face"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='FACE')
        if bpy.ops.mesh.select_mode != "VERT, EDGE":
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='FACE')
            return {'FINISHED'}


######################
#   Selection Mode   #               
######################        

# Components Selection Mode
class VertsEdges(bpy.types.Operator):
    bl_idname = "verts.edges"
    bl_label = "Verts Edges"
    
    def execute(self, context):
        layout = self.layout
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.context.tool_settings.mesh_select_mode = (True, True, False)
        if bpy.context.object.mode == "EDIT":
            bpy.context.tool_settings.mesh_select_mode = (True, True, False)
            return {'FINISHED'}
        
 
class EdgesFaces(bpy.types.Operator):
    bl_idname = "edges.faces"
    bl_label = "EdgesFaces"
    
    def execute(self, context):
        layout = self.layout 
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.context.tool_settings.mesh_select_mode = (False, True, True)
        if bpy.context.object.mode == "EDIT":
            bpy.context.tool_settings.mesh_select_mode = (False, True, True)
            return {'FINISHED'}
        
class VertsFaces(bpy.types.Operator):
    bl_idname = "verts.faces"
    bl_label = "Verts Faces"
    
    def execute(self, context):
        layout = self.layout  
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.context.tool_settings.mesh_select_mode = (True, False, True)
        if bpy.context.object.mode == "EDIT":
            bpy.context.tool_settings.mesh_select_mode = (True, False, True)
            return {'FINISHED'}
    
class VertsEdgesFaces(bpy.types.Operator):
    bl_idname = "verts.edgesfaces"
    bl_label = "Verts Edges Faces"
    
    def execute(self, context):
        layout = self.layout  
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.context.tool_settings.mesh_select_mode = (True, True, True)
        if bpy.context.object.mode == "EDIT":
            bpy.context.tool_settings.mesh_select_mode = (True, True, True)
            return {'FINISHED'}
        
######################
#       Views        #               
######################

# Split area horizontal
class SplitHorizontal(bpy.types.Operator):
    bl_idname = "split.horizontal"
    bl_label = "split horizontal"
    
    def execute(self, context):
        layout = self.layout

        bpy.ops.screen.area_split(direction='HORIZONTAL')
        return {'FINISHED'}

# Split area vertical
class SplitVertical(bpy.types.Operator):
    bl_idname = "split.vertical"
    bl_label = "split vertical"
    
    def execute(self, context):
        layout = self.layout

        bpy.ops.screen.area_split(direction='VERTICAL')
        return {'FINISHED'}
        
  
# Join area
class JoinArea(bpy.types.Operator):
    """Join 2 area, clic on the second area to join"""
    bl_idname = "area.joinarea"
    bl_label = "Join Area"

    min_x = IntProperty()
    min_y = IntProperty()

    def modal(self, context, event):
        if event.type == 'LEFTMOUSE':
            self.max_x = event.mouse_x
            self.max_y = event.mouse_y
            bpy.ops.screen.area_join(min_x=self.min_x, min_y=self.min_y, max_x=self.max_x, max_y=self.max_y)
            bpy.ops.screen.screen_full_area()
            bpy.ops.screen.screen_full_area()
            return {'FINISHED'}
        return {'RUNNING_MODAL'}

    def invoke(self, context, event):
        self.min_x = event.mouse_x
        self.min_y = event.mouse_y
        context.window_manager.modal_handler_add(self)
        return {'RUNNING_MODAL'}
    
#View Class menu
class ViewMenu(bpy.types.Operator):
    """Menu to change views"""
    bl_idname = "object.view_menu"
    bl_label = "View_Menu"
    variable = bpy.props.StringProperty()

    @classmethod
    def poll(cls, context):
        return True

    def execute(self, context):
        bpy.context.area.type=self.variable
        return {'FINISHED'} 
    
######################
#   Cursor/Origin    #               
###################### 

#Pivot to selection
class PivotToSelection(bpy.types.Operator):  
    bl_idname = "object.pivot2selection"  
    bl_label = "Pivot To Selection"  
  
    def execute(self, context):  
        saved_location = bpy.context.scene.cursor_location.copy()
        bpy.ops.view3d.snap_cursor_to_selected()
        bpy.ops.object.mode_set(mode = 'OBJECT')
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
        bpy.context.scene.cursor_location = saved_location 
        return {'FINISHED'}  

#Pivot to Bottom
class PivotBottom(bpy.types.Operator):  
    bl_idname = "object.pivotobottom"  
    bl_label = "Pivot To Bottom"  
  
    def execute(self, context):
        
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)
        bpy.ops.object.origin_set(type='ORIGIN_GEOMETRY')
        o=bpy.context.active_object
        init=0
        for x in o.data.vertices:
             if init==0:
                 a=x.co.z
                 init=1
             elif x.co.z<a:
                 a=x.co.z
                 
        for x in o.data.vertices:
             x.co.z-=a

        o.location.z+=a 
        return {'FINISHED'}    

#Align to X
class AlignToX(bpy.types.Operator):  
    bl_idname = "object.align2x"  
    bl_label = "Align To X"  
  
    def execute(self, context):
        bpy.ops.object.mode_set(mode = 'OBJECT')
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)

        for vert in bpy.context.object.data.vertices:
            if vert.select: 
                vert.co[0] = 0
        bpy.ops.object.editmode_toggle() 
        return {'FINISHED'} 

#Space
class RetopoSpace(bpy.types.Operator):  
    bl_idname = "retopo.space"  
    bl_label = "Retopo Space"  
  
    def execute(self, context):
        bpy.ops.mesh.looptools_space(influence=100, input='selected', interpolation='cubic', lock_x=False, lock_y=False, lock_z=False) 
        return {'FINISHED'} 

         
######################
#     Pie Menus      #               
######################
  
# Pie Menu Select Mode
class WazouPieMenu(Menu):
    bl_label = "Select Mode"

    def draw(self, context):
        layout = self.layout
           
        ob = context
        if ob.object.type == 'MESH':

            pie = layout.menu_pie()
            #4 - LEFT
            pie.operator("class.vertex", text="Vertex", icon='VERTEXSEL')
            #6 - RIGHT
            pie.operator("class.face", text="Face", icon='FACESEL')
            #2 - BOTTOM
            pie.operator("class.edge", text="Edge", icon='EDGESEL')
            #8 - TOP
            pie.operator("class.object", text="Edit/Object", icon='OBJECT_DATAMODE')
            #7 - TOP - LEFT 
            pie.operator("class.pietexturepaint", text="Texture Paint", icon='WPAINT_HLT')
            #9 - TOP - RIGHT
            pie.operator("sculpt.sculptmode_toggle", text="Sculpt", icon='SCULPTMODE_HLT')
            #1 - BOTTOM - LEFT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("class.pievertexpaint", text="Vertex Paint", icon='VPAINT_HLT')
            box.operator("class.pieweightpaint", text="Weight Paint", icon='WPAINT_HLT')
            #3 - BOTTOM - RIGHT
            box = pie.split().column()
            row = box.row(align=True)
            box.operator("verts.faces", text="Vertex/Faces")
            box.operator("verts.edges", text="Vertex/Edges")
            box.operator("edges.faces", text="Edges/Faces")
            box.operator("verts.edgesfaces", text="Vertex/Edges/Faces")
            
            
        elif ob.object.type == 'CURVE':
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle", text="Edit/Object", icon='OBJECT_DATAMODE')
          
        elif ob.object.type == 'ARMATURE':
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle", text="Edit Mode", icon='OBJECT_DATAMODE')
            pie.operator("object.posemode_toggle", text="Pose", icon='POSE_HLT')
            pie.operator("class.object", text="Object Mode", icon='OBJECT_DATAMODE')
            
        elif ob.object.type == 'FONT':
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle", text="Edit/Object", icon='OBJECT_DATAMODE')    
        
        elif ob.object.type == 'SURFACE':
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle", text="Edit/Object", icon='OBJECT_DATAMODE')
        
        elif ob.object.type == 'ARMATURE':
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle", text="Edit/Object", icon='OBJECT_DATAMODE')   
        
        elif ob.object.type == 'META':
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle", text="Edit/Object", icon='OBJECT_DATAMODE') 
        
        elif ob.object.type == 'LATTICE':
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle", text="Edit/Object", icon='OBJECT_DATAMODE')
            
        elif ob.object.type == 'ARMATURE':
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle", text="Edit/Object", icon='OBJECT_DATAMODE')       

# View Pie Menu
class WazouViewsPieMenus(Menu):
    # label is displayed at the center of the pie menu.
    bl_label = "Views"
    bl_idname = "scene.views_pie"

    def draw(self, context):
        layout = self.layout

        pie = layout.menu_pie()
        
        #4 - LEFT
        pie.operator("object.view_menu", text="Node Editor", icon= 'NODETREE').variable="NODE_EDITOR"
        #6 - RIGHT
        pie.operator("object.view_menu", text="Image Editor", icon= 'IMAGE_COL').variable="IMAGE_EDITOR"
        #2 - BOTTOM
        pie.operator_context="INVOKE_DEFAULT"
        pie.operator("area.joinarea", icon='X', text="Join Area")
        #8 - TOP
        pie.operator("object.view_menu", text="VIEW 3D", icon= 'VIEW3D').variable="VIEW_3D"
        #7 - TOP - LEFT 
        box = pie.split().column()
        row = box.row(align=True)
        box.operator("object.view_menu", text="Text Editor", icon= 'FILE_TEXT').variable="TEXT_EDITOR" 
        box.operator("object.view_menu", text="Outliner", icon= 'OOPS').variable="OUTLINER" 
        box.operator("object.view_menu", text="Properties", icon= 'BUTS').variable="PROPERTIES"
        box.operator("object.view_menu", text="User Preferences", icon= 'PREFERENCES').variable="USER_PREFERENCES" 
        #9 - TOP - RIGHT
        box = pie.split().column()
        row = box.row(align=True)
        box.operator("object.view_menu", text="Graph Editor", icon= 'IPO').variable="GRAPH_EDITOR"
        box.operator("object.view_menu", text="Dope Sheet", icon= 'ACTION').variable="DOPESHEET_EDITOR"
        box.operator("object.view_menu", text="Timeline", icon= 'TIME').variable="TIMELINE"
        box.menu("oher.viewsmenu", text="Other Views", icon= 'FULLSCREEN')
        #1 - BOTTOM - LEFT
        pie.operator("split.vertical", text="Split Vertical", icon= 'TRIA_RIGHT')
        #3 - BOTTOM - RIGHT
        pie.operator("split.horizontal", text="Split Horizontal", icon= 'TRIA_DOWN')
         
#Other views
class OherViewsMenu(Menu):
    bl_idname = "oher.viewsmenu"
    bl_label = "Oher Views Menu"

    def draw(self, context):
        layout = self.layout
        layout.operator("object.view_menu", text="NLA Editor", icon= 'NLA').variable="NLA_EDITOR"
        layout.operator("object.view_menu", text="Sequence Editor", icon= 'SEQUENCE').variable="SEQUENCE_EDITOR"
        layout.operator("object.view_menu", text="Movie Clip Editor", icon= 'RENDER_ANIMATION').variable="CLIP_EDITOR"
        layout.operator("object.view_menu", text="Python Console", icon= 'CONSOLE').variable="CONSOLE"
        layout.operator("object.view_menu", text="File Browser", icon= 'FILESEL').variable="FILE_BROWSER"
        layout.operator("object.view_menu", text="Info", icon= 'INFO').variable="INFO"
        layout.operator("object.view_menu", text="Logic Editor", icon= 'LOGIC').variable="LOGIC_EDITOR" 
        
# Sculp Pie Menus
class SculptPieMenu(Menu):
    bl_idname = "sculpt.pie"
    bl_label = "Sculpt Pie Menu"

    def draw(self, context):
        layout = self.layout
        
        pie = layout.menu_pie()
        #4 - LEFT
        pie.operator("crease.brush", text='Crease', icon='BRUSH_CREASE')
        #6 - RIGHT
        pie.operator("clay.brush", text='Clay', icon='BRUSH_CLAY')     
        #2 - BOTTOM
        pie.operator("flatten.brush", text='Flatten', icon='BRUSH_FLATTEN')
        #8 - TOP
        pie.operator("draw.brush", text='Draw', icon='BRUSH_SCULPT_DRAW')
        #7 - TOP - LEFT 
        pie.operator("inflate.brush", text='Inflate', icon='BRUSH_INFLATE')
        #9 - TOP - RIGHT
        pie.operator("grab.brush", text='Grab', icon='BRUSH_GRAB')
        #1 - BOTTOM - LEFT
        pie.operator("mask.brush", text='Mask', icon='BRUSH_MASK')
        #3 - BOTTOM - RIGHT
        pie.operator("fill.brush", text='Fill', icon='BRUSH_FILL')

# Sculp Pie Menus 2        
class SculpttwoPieMenu(Menu):
    bl_idname = "sculpttwo.pie"
    bl_label = "Sculpt Pie Menu 2"

    def draw(self, context):
        layout = self.layout
        
        pie = layout.menu_pie()
        #4 - LEFT
        pie.operator("claystrips.brush", text='Claystrips', icon='BRUSH_CREASE')
        #6 - RIGHT
        pie.operator("blob.brush", text='Blob', icon='BRUSH_BLOB')     
        #2 - BOTTOM
        pie.operator("snakehook.brush", text='Snakehook', icon='BRUSH_SNAKE_HOOK')
        #8 - TOP
        pie.operator("smooth.brush", text='Smooth', icon='BRUSH_SMOOTH')
        #7 - TOP - LEFT 
        pie.operator("pinchmagnify.brush", text='Pinch', icon='BRUSH_PINCH')
        #9 - TOP - RIGHT
        pie.operator("polish.brush", text='Polish', icon='BRUSH_FLATTEN')
        #1 - BOTTOM - LEFT
        box = pie.split().column()
        row = box.row(align=True)
        box.operator("twist.brush", text='Twist', icon='BRUSH_ROTATE')
        box.operator("scrapepeaks.brush", text='Scrape/Peaks', icon='BRUSH_SCRAPE')
        box.operator("twist.brush", text='Twist', icon='BRUSH_ROTATE')
        #3 - BOTTOM - RIGHT
        box = pie.split().column()
        row = box.row(align=True)
        box.operator("layer.brush", text='Layer', icon='BRUSH_LAYER')
        box.operator("nudge.brush", text='Nudge', icon='BRUSH_NUDGE')
        box.operator("thumb.brush", text='Thumb', icon='BRUSH_THUMB')

#Origin/Pivot
class OriginPivot(Menu):
    bl_idname = "origin.pivot"
    bl_label = "Origin Pivot"

    def draw(self, context):
        layout = self.layout
        
        pie = layout.menu_pie()
        #4 - LEFT
        pie.operator("object.pivotobottom", text="Origin to Bottom", icon='TRIA_DOWN')
        #6 - RIGHT
        pie.operator("view3d.snap_cursor_to_selected", text="Cursor to Selected", icon='ROTACTIVE')   
        #2 - BOTTOM
        pie.operator("view3d.snap_selected_to_cursor", text="Selection to Cursor", icon='CLIPUV_HLT').use_offset = False
        #8 - TOP
        pie.operator("object.origin_set", text="Origin To 3D Cursor", icon='CURSOR').type ='ORIGIN_CURSOR'
        #7 - TOP - LEFT 
        pie.operator("object.pivot2selection", text="Origin To Selection", icon='SNAP_INCREMENT')
        #9 - TOP - RIGHT
        pie.operator("object.origin_set", text="Origin To Geometry", icon='ROTATE').type ='ORIGIN_GEOMETRY'
        #1 - BOTTOM - LEFT
        pie.operator("object.origin_set", text="Geometry To Origin", icon='BBOX').type ='GEOMETRY_ORIGIN'
        #3 - BOTTOM - RIGHT
        pie.menu("origin.pivotmenu", text="Others", icon='CURSOR')
        
#Origin/Pivot menu1
class OriginPivotMenu(Menu):
    bl_idname = "origin.pivotmenu"
    bl_label = "Origin Pivot Menu"

    def draw(self, context):
        layout = self.layout        
         
        layout.operator("object.origin_set", text="Origin to Center of Mass").type = 'ORIGIN_CENTER_OF_MASS'
        layout.operator("view3d.snap_selected_to_grid", text="Selection to Grid")
        layout.operator("view3d.snap_selected_to_cursor", text="Selection to Cursor (Offset)").use_offset = True

        layout.separator()
        
        layout.operator("view3d.snap_cursor_to_center", text="Cursor to Center")
        layout.operator("view3d.snap_cursor_to_grid", text="Cursor to Grid")
        layout.operator("view3d.snap_cursor_to_active", text="Cursor to Active")

#Pie Manipulators
class PieManipulator(Menu):
    bl_idname = "pie.manipulator"
    bl_label = "Pie Manipulator"

    def draw(self, context):
        layout = self.layout
        
        pie = layout.menu_pie()
        #4 - LEFT
        pie.operator("manip.translate", text="Translate", icon='MAN_TRANS')
        #6 - RIGHT
        pie.operator("manip.scale", text="scale", icon='MAN_SCALE')
        #2 - BOTTOM
        pie.operator("manip.rotate", text="Rotate", icon='MAN_ROT')
        #8 - TOP
        pie.operator("w.manupulators", text="Manipulator", icon='MANIPUL')
        #7 - TOP - LEFT 
        pie.operator("translate.rotate", text="Translate/Rotate")
        #9 - TOP - RIGHT
        pie.operator("translate.scale", text="Translate/Scale")
        #1 - BOTTOM - LEFT
        pie.operator("rotate.scale", text="Rotate/Scale")
        #3 - BOTTOM - RIGHT
        pie.operator("translate.rotatescale", text="Translate/Rotate/Scale")

#Pie Snapping
class PieSnaping(Menu):
    bl_idname = "pie.snapping"
    bl_label = "Pie Snapping"

    def draw(self, context):
        layout = self.layout
        
        pie = layout.menu_pie()
        #4 - LEFT
        pie.operator("snap.vertex", text="Vertex", icon='SNAP_VERTEX')
        #6 - RIGHT
        pie.operator("snap.face", text="Face", icon='SNAP_FACE')
        #2 - BOTTOM
        pie.operator("snap.edge", text="Edge", icon='SNAP_EDGE')
        #8 - TOP
        pie.operator("snap.active", text="Snap On/Off", icon='SNAP_ON')
        #7 - TOP - LEFT 
        pie.operator("snap.volume", text="Volume", icon='SNAP_VOLUME')
        #9 - TOP - RIGHT
        pie.operator("snap.increment", text="Increment", icon='SNAP_INCREMENT')
        #1 - BOTTOM - LEFT
        pie.operator("snap.alignrotation", text="Align rotation", icon='SNAP_NORMAL')
        #3 - BOTTOM - RIGHT
        pie.menu("snap.targetmenu", text="Snap Target", icon='SNAP_SURFACE')    
           
#Snap Target
class SnapTargetMenu(Menu):
    bl_idname = "snap.targetmenu"
    bl_label = "Snap Target Menu"

    def draw(self, context):
        layout = self.layout       
        
         
        layout.operator("object.snaptargetvariable", text="Active").variable='ACTIVE'
        layout.operator("object.snaptargetvariable", text="Median").variable='MEDIAN'
        layout.operator("object.snaptargetvariable", text="Center").variable='CENTER' 
        layout.operator("object.snaptargetvariable", text="Closest").variable='CLOSEST'

#Pie Orientation
class PieOrientation(Menu):
    bl_idname = "pie.orientation"
    bl_label = "Pie Orientation"

    def draw(self, context):
        layout = self.layout
        
        pie = layout.menu_pie()
        #4 - LEFT
        pie.operator("object.orientationvariable", text="View").variable = 'VIEW'
        #6 - RIGHT
        pie.operator("object.orientationvariable", text="Local").variable = 'LOCAL'
        #2 - BOTTOM
        pie.operator("object.orientationvariable", text="Normal").variable = 'NORMAL'
        #8 - TOP
        pie.operator("object.orientationvariable", text="Global").variable = 'GLOBAL'
        #7 - TOP - LEFT 
        pie.operator("object.orientationvariable", text="Gimbal").variable = 'GIMBAL'
        #9 - TOP - RIGHT
        #1 - BOTTOM - LEFT
        #3 - BOTTOM - RIGHT
               
class PieRetopo(Menu):
    bl_idname = "pie.retopo"
    bl_label = "Pie Retopo"

    def draw(self, context):
        layout = self.layout
        
        pie = layout.menu_pie()
        #4 - LEFT
        pie.operator("mesh.gstretch", text="GStretch", icon='GREASEPENCIL')
        #6 - RIGHT
        pie.operator("object.align2x", icon='MOD_WIREFRAME')
        #2 - BOTTOM
        pie.operator("mesh.laprelax", icon = 'MOD_LATTICE')
        #8 - TOP
        pie.operator("gpencil.surfsk_add_surface", text="Add Bsurface", icon = 'MOD_DYNAMICPAINT')
        #7 - TOP - LEFT 
        pie.operator("retopo.space", icon='ALIGN')
        #9 - TOP - RIGHT
        pie.operator("shrink.update", icon = 'MOD_SHRINKWRAP')
        #1 - BOTTOM - LEFT
        pie.operator("object.automirror", icon = 'MOD_MIRROR')
        #3 - BOTTOM - RIGHT
        pie.operator("polysculpt.retopo", text = "Sculpt Mesh", icon = 'SCULPTMODE_HLT')
              
addon_keymaps = []

def register():
    # Pie Menu Select Mode
    bpy.utils.register_class(WazouPieMenu)
    bpy.utils.register_class(ClassObject)
    bpy.utils.register_class(ClassVertex)
    bpy.utils.register_class(ClassEdge)
    bpy.utils.register_class(ClassFace)
    bpy.utils.register_class(ClassTexturePaint)
    bpy.utils.register_class(ClassVertexPaint)
    bpy.utils.register_class(ClassWeightPaint)
    # View Menu
    bpy.utils.register_class(WazouViewsPieMenus)
    bpy.utils.register_class(JoinArea)
    bpy.utils.register_class(SplitHorizontal)
    bpy.utils.register_class(SplitVertical)
    bpy.utils.register_class(ViewMenu)
    bpy.utils.register_class(OherViewsMenu)
    # Sculpt Pie Menu
    bpy.utils.register_class(SculptPieMenu)
    bpy.utils.register_class(InflateBrush)
    bpy.utils.register_class(ClayBrush)
    bpy.utils.register_class(CreaseBrush)
    bpy.utils.register_class(DrawBrush)
    bpy.utils.register_class(GrabBrush)
    bpy.utils.register_class(FlattenBrush)
    bpy.utils.register_class(MaskBrush)
    bpy.utils.register_class(FillBrush)
    # Sculpt Pie Menu 2
    bpy.utils.register_class(SculpttwoPieMenu)
    bpy.utils.register_class(ClayStripsBrush)
    bpy.utils.register_class(BlobBrush)
    bpy.utils.register_class(LayerBrush)
    bpy.utils.register_class(NudgeBrush)
    bpy.utils.register_class(PinchMagnifyBrush)
    bpy.utils.register_class(PolishBrush)
    bpy.utils.register_class(SculptDrawBrush)
    bpy.utils.register_class(SmoothBrush)
    bpy.utils.register_class(SnakeHookBrush)
    bpy.utils.register_class(ThumbBrush)
    bpy.utils.register_class(TwistBrush)
    bpy.utils.register_class(ScrapePeaksBrush)
    # Components Selection Mode
    bpy.utils.register_class(VertsEdges)
    bpy.utils.register_class(EdgesFaces)
    bpy.utils.register_class(VertsFaces)
    bpy.utils.register_class(VertsEdgesFaces)
    # Origin/Pivot
    bpy.utils.register_class(PivotToSelection)
    bpy.utils.register_class(OriginPivot)
    bpy.utils.register_class(OriginPivotMenu)
    bpy.utils.register_class(PivotBottom)
    # Manipulators
    bpy.utils.register_class(PieManipulator)
    bpy.utils.register_class(WManupulators)
    bpy.utils.register_class(ManipTranslate)
    bpy.utils.register_class(ManipRotate)
    bpy.utils.register_class(ManipScale)
    bpy.utils.register_class(TranslateRotate)
    bpy.utils.register_class(TranslateScale)
    bpy.utils.register_class(RotateScale) 
    bpy.utils.register_class(TranslateRotateScale)
    # Snapping
    bpy.utils.register_class(PieSnaping)
    bpy.utils.register_class(SnapActive)
    bpy.utils.register_class(SnapVolume)
    bpy.utils.register_class(SnapFace)
    bpy.utils.register_class(SnapEdge)
    bpy.utils.register_class(SnapVertex)
    bpy.utils.register_class(SnapIncrement)
    bpy.utils.register_class(SnapAlignRotation)
    bpy.utils.register_class(SnapTargetMenu)
    bpy.utils.register_class(SnapTargetVariable)
    # Orientation
    bpy.utils.register_class(PieOrientation)
    bpy.utils.register_class(OrientationVariable)
    # Retopo
    bpy.utils.register_class(PieRetopo)
    bpy.utils.register_class(AlignToX)
    bpy.utils.register_class(RetopoSpace)
    
    
# Keympa Config   
    
    wm = bpy.context.window_manager
    
    if wm.keyconfigs.addon:
        #Select Mode
        km = wm.keyconfigs.addon.keymaps.new(name='Object Non-modal')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'TAB', 'PRESS').properties.name = 'WazouPieMenu'
        
        #Views
        km = wm.keyconfigs.addon.keymaps.new(name='Screen')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'SPACE', 'PRESS').properties.name = "scene.views_pie"
        
        #Sculpt Pie Menu
        km = wm.keyconfigs.addon.keymaps.new(name = '3D View Generic', space_type = 'VIEW_3D')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'W', 'PRESS').properties.name = "sculpt.pie"
        
        #Sculpt Pie Menu 2
        km = wm.keyconfigs.addon.keymaps.new(name = '3D View Generic', space_type = 'VIEW_3D')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'W', 'PRESS', alt=True).properties.name = "sculpttwo.pie"
        
        #Origin/Pivot
        km = wm.keyconfigs.addon.keymaps.new(name = '3D View Generic', space_type = 'VIEW_3D')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'S', 'PRESS', shift=True).properties.name = "origin.pivot"
        
        #Manipulators
        km = wm.keyconfigs.addon.keymaps.new(name = '3D View Generic', space_type = 'VIEW_3D')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'SPACE', 'PRESS', ctrl=True).properties.name = "pie.manipulator"
        
        #Snapping
        km = wm.keyconfigs.addon.keymaps.new(name = '3D View Generic', space_type = 'VIEW_3D')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'TAB', 'PRESS', shift=True, ctrl=True).properties.name = "pie.snapping"
        
        #Orientation
        km = wm.keyconfigs.addon.keymaps.new(name = '3D View Generic', space_type = 'VIEW_3D')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'SPACE', 'PRESS', alt=True).properties.name = "pie.orientation"
        
        #Retopo
        km = wm.keyconfigs.addon.keymaps.new(name = '3D View Generic', space_type = 'VIEW_3D')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'RIGHTMOUSE', 'PRESS', shift=True).properties.name = "pie.retopo"
        
    
        addon_keymaps.append(km)

# Register / Unregister Classes
def unregister():
    # Pie Menu Select Mode
    bpy.utils.unregister_class(WazouPieMenu)
    bpy.utils.unregister_class(ClassObject)
    bpy.utils.unregister_class(ClassVertex)
    bpy.utils.unregister_class(ClassEdge)
    bpy.utils.unregister_class(ClassFace)
    bpy.utils.unregister_class(ClassTexturePaint)
    bpy.utils.unregister_class(ClassVertexPaint)
    bpy.utils.unregister_class(ClassWeightPaint)
    # View Menu
    bpy.utils.unregister_class(WazouViewsPieMenus)
    bpy.utils.unregister_class(JoinArea)
    bpy.utils.unregister_class(SplitHorizontal)
    bpy.utils.unregister_class(SplitVertical)
    bpy.utils.unregister_class(ViewMenu)
    bpy.utils.unregister_class(OherViewsMenu)
    # Sculpt Pie Menu
    bpy.utils.unregister_class(SculptPieMenu)
    bpy.utils.unregister_class(InflateBrush)
    bpy.utils.unregister_class(ClayBrush)
    bpy.utils.unregister_class(CreaseBrush)
    bpy.utils.unregister_class(DrawBrush)
    bpy.utils.unregister_class(GrabBrush)
    bpy.utils.unregister_class(FlattenBrush)
    bpy.utils.unregister_class(MaskBrush)
    bpy.utils.unregister_class(FillBrush)
    # Sculpt Pie Menu 2
    bpy.utils.unregister_class(SculpttwoPieMenu)
    bpy.utils.unregister_class(ClayStripsBrush)
    bpy.utils.unregister_class(BlobBrush)
    bpy.utils.unregister_class(LayerBrush)
    bpy.utils.unregister_class(NudgeBrush)
    bpy.utils.unregister_class(PinchMagnifyBrush)
    bpy.utils.unregister_class(PolishBrush)
    bpy.utils.unregister_class(SculptDrawBrush)
    bpy.utils.unregister_class(SmoothBrush)
    bpy.utils.unregister_class(SnakeHookBrush)
    bpy.utils.unregister_class(ThumbBrush)
    bpy.utils.unregister_class(TwistBrush)
    bpy.utils.unregister_class(ScrapePeaksBrush)
    # Components Selection Mode
    bpy.utils.unregister_class(VertsEdges)
    bpy.utils.unregister_class(EdgesFaces)
    bpy.utils.unregister_class(VertsFaces)
    bpy.utils.unregister_class(VertsEdgesFaces)
    # Origin/Pivot
    bpy.utils.unregister_class(PivotToSelection)
    bpy.utils.unregister_class(OriginPivot)
    bpy.utils.unregister_class(OriginPivotMenu)
    bpy.utils.unregister_class(PivotBottom)
    # Manipulators
    bpy.utils.unregister_class(PieManipulator)
    bpy.utils.unregister_class(WManupulators)
    bpy.utils.unregister_class(ManipTranslate)
    bpy.utils.unregister_class(ManipRotate)
    bpy.utils.unregister_class(ManipScale)
    bpy.utils.unregister_class(TranslateRotate)
    bpy.utils.unregister_class(TranslateScale)
    bpy.utils.unregister_class(RotateScale) 
    bpy.utils.unregister_class(TranslateRotateScale)
    # Snapping
    bpy.utils.unregister_class(PieSnaping)
    bpy.utils.unregister_class(SnapActive)
    bpy.utils.unregister_class(SnapVolume)
    bpy.utils.unregister_class(SnapFace)
    bpy.utils.unregister_class(SnapEdge)
    bpy.utils.unregister_class(SnapVertex)
    bpy.utils.unregister_class(SnapIncrement)
    bpy.utils.unregister_class(SnapAlignRotation)
    bpy.utils.unregister_class(SnapTargetMenu)
    bpy.utils.unregister_class(SnapTargetVariable)
    # Orientation
    bpy.utils.unregister_class(PieOrientation)
    bpy.utils.unregister_class(OrientationVariable)
    #Retopo
    bpy.utils.unregister_class(PieRetopo)
    bpy.utils.unregister_class(AlignToX)
    bpy.utils.unregister_class(RetopoSpace)
        
    wm = bpy.context.window_manager

    if wm.keyconfigs.addon:
        for km in addon_keymaps:
            for kmi in km.keymap_items:
                km.keymap_items.remove(kmi)

            wm.keyconfigs.addon.keymaps.remove(km)

    # clear the list
    del addon_keymaps[:]

if __name__ == "__main__":
    register()



