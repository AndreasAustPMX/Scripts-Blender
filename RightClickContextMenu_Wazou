
bl_info = {
    "name": "Right Click Context Menu",
    "author": "CÃ©dric Lepiller",
    "version": (0, 1, 1),
    "blender": (2, 7, 0),
    "location": "View3D > RMB",
    "description": "Right Click Context Menu",
    "category": "3D View"}

"""
Right Click Context Menu
This adds a the Right Click Context Menu in the View3D, and other editors.
Left mouse is SELECTION.
Left Double click sets the 3D cursor.

"""

import bpy
from bpy import *
from mathutils import Vector, Matrix
import math

class SimpleOperatorSnap(bpy.types.Operator):
    bl_idname = "object.simple_operator_snap"
    bl_label = "Simple Object Operator Snap"
    variable = bpy.props.StringProperty()

    @classmethod
    def poll(cls, context):
        return True

    def execute(self, context):
        bpy.context.tool_settings.snap_element=self.variable
        return {'FINISHED'} 

# VIEW3D
class VIEW3D_MT_Right_Click_Context_Menu(bpy.types.Menu):
    bl_label = ""

    def draw(self, context):
        layout = self.layout
        settings = context.tool_settings
        layout.operator_context = 'INVOKE_REGION_WIN'

        ob = context
        if ob.mode == 'OBJECT':
            
            # Object mode
            
            layout.menu("AddMenu", text="Add Objects", icon="OBJECT_DATA")
            layout.operator("screen.redo_last", text="F6")
            layout.operator("object.subsurf2", text="Subdiv Level 2", icon='MESH_UVSPHERE')
            layout.operator("object.subdivision_set", text="Subdiv Level 0", icon='MESH_ICOSPHERE').level=0
            layout.separator()
            props = layout.operator("object.transform_apply", text="Freeze Transforms", icon='FREEZE')
            props.location, props.rotation, props.scale = True, True, True
            layout.operator("object.pivot2selection", text="Pivot To Selection", icon='CURSOR')
            layout.menu("cursor", text="Cursor/Origin", icon='CURSOR')
            layout.separator()
            #bpy.ops.object.modifier_apply(apply_as='DATA', modifier="Subsurf")
            layout.operator("object.modifier_apply", text="Apply Subsurf", icon='MOD_SUBSURF').modifier="Subsurf"
            layout.operator("object.modifier_apply", text="Apply Mirror", icon='MOD_MIRROR').modifier="Mirror"
            layout.operator("object.sngons", text="Select Ngons", icon='MESH_ICOSPHERE')
            layout.operator("object.join", icon = 'ROTATECENTER')
            layout.separator()
            
            layout.operator_menu_enum("object.modifier_add", "type", icon='MODIFIER')
            
            
        elif ob.mode == 'EDIT_MESH':
            # Edit mode

            layout.operator("screen.redo_last", text="F6")
            layout.separator()
            layout.operator("mesh.inset",text="Inset", icon='EDIT_VEC').use_select_inset=False
            layout.operator("mesh.loopcut", text="Loopcut smoothness", icon='EDIT_VEC').smoothness=1
            layout.operator("object.align2x", text="Align To X", icon='MOD_WIREFRAME')
            layout.separator()
            layout.menu("merge", text="Merge", icon='AUTOMERGE_ON')
            layout.operator("mesh.flip_normals", icon = 'FULLSCREEN_ENTER')
            layout.operator("mesh.normals_make_consistent", icon = 'MATCUBE')
            layout.operator("mesh.remove_doubles",icon='X_VEC')
            layout.separator()
            layout.operator("object.pivot2selection", text="Pivot To Selection", icon='CURSOR')
            layout.menu("cursor", text="Cursor/Origin", icon='CURSOR')
            layout.menu("Snap", text="Snap elements", icon='SNAP_INCREMENT')
            layout.operator("mesh.separate", icon = 'ROTATECOLLECTION')
            layout.operator("wm.context_toggle", text="X mirror", icon='X_VEC').data_path = "object.data.use_mirror_x"
            
            

        if ob.mode == 'EDIT_CURVE':
            # Curve menu

            layout.menu("INFO_MT_curve_add", text="Add Curve",icon='OUTLINER_OB_CURVE')
            layout.separator()
            layout.menu("cursor", text="Cursor/Origin", icon='CURSOR')
            layout.separator()
            layout.menu("VIEW3D_MT_EditCurveCtrlpoints",icon='CURVE_BEZCURVE')


#Subsurf 2
class SubSurf2(bpy.types.Operator):  
    bl_idname = "object.subsurf2"  
    bl_label = "SubSurf 2"  
  
    def execute(self, context):
        bpy.ops.object.subdivision_set(level=2)
        bpy.context.object.modifiers["Subsurf"].show_only_control_edges = True
        bpy.ops.object.shade_smooth()
        return {'FINISHED'} 

#Select Ngons

class SelectNGons(bpy.types.Operator):  
    bl_idname = "object.sngons"  
    bl_label = "Select Ngons"  
  
    def execute(self, context):
        print("----- SCRIPT -----")
            
        for ob in bpy.data.objects:
            if ob.select:
                if ob.type == "MESH":
                    ob.select = True
                    m = ob.data
                    faces = []
                    for face in m.polygons:
                        face.select = False
                        verts_on_face = face.vertices[:] 
                        if len(verts_on_face) > 4:
                            face.select = True
                            faces.append(face.index)
                                              
                    if len(faces) > 0:
                        ob.select = False
                        print(ob.name)                
                        print(faces)
                        bpy.context.scene.objects.active = ob                  
                        
            bpy.ops.object.mode_set(mode = 'EDIT')
            return {'FINISHED'} 
          
#Pivot down
class PivotBottom(bpy.types.Operator):  
    bl_idname = "object.pivotobottom"  
    bl_label = "Pivot To Bottom"  
  
    def execute(self, context):
        
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)
        bpy.ops.object.origin_set(type='ORIGIN_GEOMETRY')
        o=bpy.context.active_object
        init=0
        for x in o.data.vertices:
             if init==0:
                 a=x.co.z
                 init=1
             elif x.co.z<a:
                 a=x.co.z
                 
        for x in o.data.vertices:
             x.co.z-=a

        o.location.z+=a           
            
#Align to X
class AlignToX(bpy.types.Operator):  
    bl_idname = "object.align2x"  
    bl_label = "Align To X"  
  
    def execute(self, context):
        bpy.ops.object.mode_set(mode = 'OBJECT')
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)

        for vert in bpy.context.object.data.vertices:
            if vert.select: 
                vert.co[0] = 0
        bpy.ops.object.editmode_toggle() 
        return {'FINISHED'} 

#Add camera to View
class AddCameraToView(bpy.types.Operator):  
    bl_idname = "object.camera_add_2_view"  
    bl_label = "Add Camera To View"  
  
    def execute(self, context):  
        bpy.ops.view3d.object_as_camera()
        bpy.ops.object.camera_add(view_align=True, enter_editmode=False, location=(0, 0, 0), rotation=(1.113, -2.44909e-007, -0.616), layers=(True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
        bpy.ops.view3d.camera_to_view()
        bpy.ops.view3d.object_as_camera()
        bpy.context.space_data.lock_camera = True

        return {'FINISHED'}  

#Pivot to selection
class PivotToSelection(bpy.types.Operator):  
    bl_idname = "object.pivot2selection"  
    bl_label = "Pivot To Selection"  
  
    def execute(self, context):  
        saved_location = bpy.context.scene.cursor_location.copy()
        bpy.ops.view3d.snap_cursor_to_selected()
        bpy.ops.object.mode_set(mode = 'OBJECT')
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
        bpy.context.scene.cursor_location = saved_location 
        return {'FINISHED'}  
        
# Cursor
class cursor(bpy.types.Menu):
    bl_label = "Cursor"

    def draw(self, context):
        layout = self.layout

        
        layout.operator("view3d.snap_selected_to_cursor", text="Selection to Cursor").use_offset = False
        layout.operator("view3d.snap_cursor_to_selected", text="Cursor to Selected")

        layout.separator()
        
        layout.operator("object.origin_set", text="Origin to Geometry").type = 'ORIGIN_GEOMETRY'
        layout.operator("object.origin_set", text="Origin to 3D Cursor").type = 'ORIGIN_CURSOR'
        
        layout.separator()
        
        layout.operator("object.pivotobottom", text="Pivot To Bottom")
  
# Add Mesh #
class AddMenu(bpy.types.Menu):
    bl_label = "Add Mesh"

    def draw(self, context):
        layout = self.layout

        
        layout.operator("mesh.primitive_cube_add", text="Cube", icon='MESH_CUBE')
        layout.operator("mesh.primitive_plane_add", text="Plane", icon='MESH_PLANE')
        layout.operator("mesh.primitive_uv_sphere_add", text="UV Sphere", icon='MESH_UVSPHERE')
        layout.operator("mesh.primitive_cylinder_add", text="Cylinder", icon='MESH_CYLINDER')
        layout.operator("mesh.primitive_grid_add", text="Grid", icon='MESH_GRID')
        layout.operator("mesh.primitive_ico_sphere_add", text="Ico Sphere", icon='MESH_ICOSPHERE')
        layout.operator("mesh.primitive_circle_add", text="Circle", icon='MESH_CIRCLE')
        layout.operator("mesh.primitive_cone_add", text="Cone", icon='MESH_CONE')
        layout.operator("mesh.primitive_torus_add", text="Torus", icon='MESH_TORUS')
        layout.operator("mesh.primitive_monkey_add", text="Monkey", icon='MESH_MONKEY')
        
        layout.separator()
        
        layout.operator("object.camera_add", icon='OUTLINER_OB_CAMERA')
        layout.operator("object.camera_add_2_view", text="Camera2View", icon='OUTLINER_OB_CAMERA')
        
        layout.separator()  
        
        layout.operator("object.lamp_add", text="Area", icon='LAMP_AREA').type = 'AREA'
        layout.operator("object.lamp_add", text="Sun", icon='LAMP_SUN').type = 'SUN'
        layout.operator("object.lamp_add", text="Hemi", icon='LAMP_HEMI').type = 'HEMI'
        layout.operator("object.lamp_add", text="Point", icon='LAMP_POINT').type = 'POINT'
        layout.operator("object.lamp_add", text="Spot", icon='LAMP_SPOT').type = 'SPOT'
        
        layout.separator()

        layout.operator("curve.primitive_bezier_circle_add", icon='CURVE_BEZCIRCLE')
        layout.operator("curve.primitive_bezier_curve_add", icon='CURVE_BEZCURVE')
        layout.operator("curve.primitive_nurbs_path_add", icon='CURVE_PATH')
        
        layout.separator()
        
        
        layout.operator("object.empty_add", text="Empty AXE", icon='OUTLINER_OB_EMPTY').type = 'PLAIN_AXES'
        layout.operator("object.empty_add", text="Empty CUBE", icon='OUTLINER_OB_EMPTY').type = 'CUBE'
        layout.operator("object.add", text="Lattice", icon='OUTLINER_OB_LATTICE').type = 'LATTICE'
        layout.operator("object.text_add", text="Text", icon='OUTLINER_OB_FONT')
        layout.operator("object.armature_add", text="Armature", icon='OUTLINER_OB_ARMATURE')
  
#Merge
class merge(bpy.types.Menu):
    bl_label = "merge"
    
    
    def draw(self, context):
        layout = self.layout     
          
        layout.operator("mesh.merge", text="At Center").type = 'CENTER'
        layout.operator("mesh.merge", text="At Last").type = 'LAST'
        layout.operator("mesh.merge", text="At First").type = 'FIRST'

#Snap
class Snap(bpy.types.Menu):
    bl_label = "merge"
    
    
    def draw(self, context):
        layout = self.layout          
        
        layout.operator("object.simple_operator_snap", text="Face", icon= 'SNAP_FACE').variable="FACE"
        layout.operator("object.simple_operator_snap", text="Vertex", icon= 'SNAP_VERTEX').variable="VERTEX"
        layout.operator("object.simple_operator_snap", text="Edge", icon= 'SNAP_EDGE').variable="EDGE"
        layout.operator("object.simple_operator_snap", text="Increment", icon= 'SNAP_INCREMENT').variable="INCREMENT"
        layout.operator("object.simple_operator_snap", text="Volume", icon= 'SNAP_VOLUME').variable="VOLUME"

def register():
    bpy.utils.register_class(SimpleOperatorSnap)
    bpy.utils.register_class(Snap)
    bpy.utils.register_class(merge)
    bpy.utils.register_class(AddMenu)
    bpy.utils.register_class(cursor)
    bpy.utils.register_class(PivotToSelection)
    bpy.utils.register_class(AlignToX)
    bpy.utils.register_class(PivotBottom)          
    bpy.utils.register_class(SelectNGons)
    bpy.utils.register_class(SubSurf2)  
    bpy.utils.register_class(AddCameraToView)
    
    
    
    
    bpy.utils.register_module(__name__)
    # Set LMB selection
    bpy.context.user_preferences.inputs.select_mouse = 'LEFT'
    # Map 3D view
    km = bpy.context.window_manager.keyconfigs.addon.keymaps.new("3D View", space_type="VIEW_3D")
    # Unset 3d cursor from LMB
    for kmi in km.keymap_items:
        if kmi.idname == 'view3d.cursor3d':
                km.keymap_items.remove(kmi)
    # Set 3d cursor with double click LMB
    kmi = km.keymap_items.new('view3d.cursor3d', 'LEFTMOUSE', 'DOUBLE_CLICK')
    # Set Menu to RMB
    kmi = km.keymap_items.new('wm.call_menu', 'RIGHTMOUSE', 'PRESS')
    kmi.properties.name = "VIEW3D_MT_Right_Click_Context_Menu"


def unregister():
    bpy.utils.unregister_class(SimpleOperatorSnap)
    bpy.utils.unregister_class(merge)
    bpy.utils.unregister_class(AddMenu)
    bpy.utils.unregister_class(cursor)
    bpy.utils.unregister_class(PivotToSelection)
    bpy.utils.unregister_class(AlignToX)
    bpy.utils.unregister_class(PivotBottom)          
    bpy.utils.unregister_class(SelectNGons)
    bpy.utils.unregister_class(SubSurf2)  
    bpy.utils.unregister_class(AddCameraToView)
    
    
    bpy.utils.unregister_module(__name__)

    # TODO set 3d view keys to default
    km = wm.keyconfigs.addon.keymaps["3D View"]
    #km = bpy.context.window_manager.keyconfigs.addon.keymaps.new("3D View", space_type="VIEW_3D")
    for kmi in km.keymap_items:
        if kmi.idname == 'wm.call_menu':
            if kmi.properties.name == "VIEW3D_MT_Right_Click_Context_Menu":
                km.keymap_items.remove(kmi)
                break

if __name__ == "__main__":
    register()









