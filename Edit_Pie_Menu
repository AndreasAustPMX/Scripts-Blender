bl_info = {
    "name": "Pie Edit Menu",
    "author": "CÃ©dric Lepiller & DavideDozza",
    "version": (1, 0, 0),
    "blender": (2, 71, 4),
    "description": "Enable pie Menus Edit Mode",
    "category": "3D View",}
    
import bpy
from bpy.types import Menu    

# Define Class Object Mode

class ClassObject(bpy.types.Operator):
    bl_idname = "class.object"
    bl_label = "Class Object"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode == "OBJECT":
            bpy.ops.object.mode_set(mode="EDIT")
        else:
            bpy.ops.object.mode_set(mode="OBJECT")  
            
            
        return {'FINISHED'}


# Define Class Vertex

class ClassVertex(bpy.types.Operator):
    bl_idname = "class.vertex"
    bl_label = "Class Vertex"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='VERT')
        if bpy.ops.mesh.select_mode != "EDGE, FACE":
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='VERT') 
            
            return {'FINISHED'}

# Define Class Edge

class ClassEdge(bpy.types.Operator):
    bl_idname = "class.edge"
    bl_label = "Class Edge"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='EDGE')
        if bpy.ops.mesh.select_mode != "VERT, FACE":
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='EDGE') 
            
            return {'FINISHED'}
        
# Define Class Face

class ClassFace(bpy.types.Operator):
    bl_idname = "class.face"
    bl_label = "Class Face"
    
    def execute(self, context):
        layout = self.layout
        
        if bpy.context.object.mode != "EDIT":
            bpy.ops.object.mode_set(mode="EDIT")
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='FACE')
        if bpy.ops.mesh.select_mode != "VERT, EDGE":
            bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='FACE') 
            
            return {'FINISHED'}
        
        
# Pie Menu

class VIEW3D_PIE_edit(Menu):
    # label is displayed at the center of the pie menu.
    bl_label = "Select Mode"

    def draw(self, context):
        layout = self.layout
           
        ob = context
        if ob.object.type == 'MESH':

            pie = layout.menu_pie()
            pie.operator("class.vertex", text="Vertex", icon='VERTEXSEL')
            pie.operator("class.face", text="Face", icon='FACESEL')
            pie.operator("class.edge", text="Edge", icon='EDGESEL')
            
            pie.operator("class.object", text="Object Mode", icon='OBJECT_DATAMODE')
            
            pie.operator("paint.texture_paint_toggle", text="Texture Paint Mode", icon='WPAINT_HLT')
            pie.operator("sculpt.sculptmode_toggle", text="Sculpt Mode", icon='SCULPTMODE_HLT')
            pie.operator("paint.vertex_paint_toggle", text="Vertex Paint Mode", icon='VPAINT_HLT')
            pie.operator("paint.weight_paint_toggle", text="Weight Paint Mode", icon='WPAINT_HLT')
            
  
        elif ob.object.type == 'CURVE':
            
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle")
            
        elif ob.object.type == 'ARMATURE':
            
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle")  
        
        elif ob.object.type == 'FONT':
            
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle")      
        
        elif ob.object.type == 'SURFACE':
            
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle")  
        
        elif ob.object.type == 'ARMATURE':
            
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle")      
        
        elif ob.object.type == 'META':
            
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle")  
        
        elif ob.object.type == 'LATTICE':
            
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle")
            
        elif ob.object.type == 'ARMATURE':
            
            pie = layout.menu_pie()
            pie.operator("object.editmode_toggle")        
            
addon_keymaps = []

def register():
    bpy.utils.register_class(VIEW3D_PIE_edit)
    bpy.utils.register_class(ClassObject)
    bpy.utils.register_class(ClassVertex)
    bpy.utils.register_class(ClassEdge)
    bpy.utils.register_class(ClassFace)
    
    wm = bpy.context.window_manager
    
    if wm.keyconfigs.addon:
       
        km = wm.keyconfigs.addon.keymaps.new(name='Object Non-modal')
        kmi = km.keymap_items.new('wm.call_menu_pie', 'TAB', 'PRESS')
        kmi.properties.name = 'VIEW3D_PIE_edit'
        
 

        addon_keymaps.append(km)


def unregister():
    bpy.utils.unregister_class(VIEW3D_PIE_edit)
    bpy.utils.unregister_class(ClassObject)
    bpy.utils.unregister_class(ClassVertex)
    bpy.utils.unregister_class(ClassEdge)
    bpy.utils.unregister_class(ClassFace)

    wm = bpy.context.window_manager

    if wm.keyconfigs.addon:
        for km in addon_keymaps:
            for kmi in km.keymap_items:
                km.keymap_items.remove(kmi)

            wm.keyconfigs.addon.keymaps.remove(km)

    # clear the list
    del addon_keymaps[:]

if __name__ == "__main__":
    register()

#bpy.ops.wm.call_menu_pie(name="VIEW3D_PIE_edit")




