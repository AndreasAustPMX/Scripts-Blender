import bpy
from bpy.types import Menu, Panel, UIList
from rna_prop_ui import PropertyPanel

#################
#     List      #
#################

class Line(bpy.types.PropertyGroup):
    # Nom de l'objet de type String
    ObjectName = bpy.props.StringProperty()
    # Description de l'objet de type 'MESH', 'LAMP', ...
    description = bpy.props.StringProperty()
    # exemple : on créé un booleen pour s'en servir pour autre chose
    float = bpy.props.FloatProperty()
    
    
class MESH_UL_mylist(bpy.types.UIList):
    # Gestion de l'affichage de la liste
    # Il parcourt la liste "lst", et affiche chacune des lignes
    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index, flt_flag):
        # Ici on indique si on veut la barre de recherche 
        self.use_filter_show = False
        obj = context.object
        if self.layout_type in {'DEFAULT', 'COMPACT'}:
            # ici on indique comment on veut que ce soit affiché, comme une interface normale
            # vous y affichez ce que vous voulez, c'est à vous de gérer ensuite
            split = layout.split(0.05)
            # Numero de l'index lors de l'affichage
            split.label("%i" % (index + 1))
            split = split.split(0.5)
            # on affiche chacun des éléments de la classe "Line" ci-dessus
            split.prop(item, "ObjectName", text="", emboss=False)
            split.prop(item, "description", text="", emboss=False)
            split.prop(obj, "hide", icon='VISIBLE_IPO_ON', text="")
            split.prop(obj, "hide_select", icon='RESTRICT_SELECT_OFF', text="")
            split.prop(obj, "hide_render", icon='RESTRICT_RENDER_OFF', text="")
            split.operator("view3d.object_as_camera", text="", icon='CURSOR')
            split.operator("object.delete", text="", icon='PANEL_CLOSE')
            #split.prop(item, "float", text="", emboss=False)
        elif self.layout_type in {'GRID'}:
            pass
        

class ListEntryOp(bpy.types.Operator):
    bl_idname = "object.listentryop"
    bl_label = "Object List Entry"
    bl_description = "Objects List Entry"

    # permet de récupérer le parametre envoyé en appuyant sur le bouton
    type=bpy.props.StringProperty(default="")
    
    def execute(self, context):
        # type d'opération
        type=self.type
        if(type=="add"):                # ajoute de nouveaux éléments
            # récupère la scene            
            scn = context.scene
            # On teste avant tout si un objet est selectionné
            if(len(context.selected_objects) > 0):
                # ajoute une nouvelle ligne à la liste
                item = scn.lst.add() # ou bpy.context.scene.lst.add()
                # On ajoute les informations de l'objet
                item.ObjectName = context.selected_objects[0].name
                #item.description = context.selected_objects[0].type

        # Pour tout supprimer, il y a une fonction simple 'clear'
        # possible directement dans la console bpy.context.scene.lst.Clear()
        if(type=="removeAll"):
            scn = context.scene
            scn.lst.clear()
            # Indique que l'index est à -1 pour eviter les erreurs
            bpy.data.scenes[0].lst_idx = -1
            
        # Pour supprimer un élément, on lui indique son index dans la liste, ici : "bpy.data.scenes[0].lst_idx"         
        elif(type=="remove"):
            scn = context.scene
            # ici on supprime la ligne selectionnée
            scn.lst.remove(bpy.data.scenes[0].lst_idx)
            
        return {'FINISHED'}    

#Lock Camera Transforms
class LockCameraTransforms(bpy.types.Operator):  
    bl_idname = "object.lockcameratransforms"  
    bl_label = "Lock Camera Transforms"  
    
    def execute(self, context):
        
        for cam in bpy.data.cameras:
            bpy.ops.object.select_camera()
            if bpy.context.object.lock_rotation[0] == False:
                bpy.context.object.lock_rotation[0] = True
                bpy.context.object.lock_rotation[1] = True
                bpy.context.object.lock_rotation[2] = True
                bpy.context.object.lock_location[0] = True
                bpy.context.object.lock_location[1] = True
                bpy.context.object.lock_location[2] = True
                bpy.context.object.lock_scale[0] = True
                bpy.context.object.lock_scale[1] = True
                bpy.context.object.lock_scale[2] = True
                
            elif bpy.context.object.lock_rotation[0] == True :
                 bpy.context.object.lock_rotation[0] = False
                 bpy.context.object.lock_rotation[1] = False
                 bpy.context.object.lock_rotation[2] = False
                 bpy.context.object.lock_location[0] = False
                 bpy.context.object.lock_location[1] = False
                 bpy.context.object.lock_location[2] = False
                 bpy.context.object.lock_scale[0] = False
                 bpy.context.object.lock_scale[1] = False
                 bpy.context.object.lock_scale[2] = False

        return {'FINISHED'}

class RENDER_MT_framerate_presets(Menu):
    bl_label = "Frame Rate Presets"
    preset_subdir = "framerate"
    preset_operator = "script.execute_preset"
    draw = Menu.draw_preset

#Panel Props
bpy.types.Scene.panel_cam = bpy.props.BoolProperty(default=False) 
bpy.types.Scene.panel_lights = bpy.props.BoolProperty(default=False) 
bpy.types.Scene.panel_renderproperties = bpy.props.BoolProperty(default=False) 
bpy.types.Scene.panel_scene = bpy.props.BoolProperty(default=False) 

#Properties Props
bpy.types.Scene.properties_dimensions = bpy.props.BoolProperty(default=False) 
bpy.types.Scene.properties_samples = bpy.props.BoolProperty(default=False) 
bpy.types.Scene.properties_lightpath = bpy.props.BoolProperty(default=False)
bpy.types.Scene.properties_render = bpy.props.BoolProperty(default=False)  
     
#Cameras props
bpy.types.Scene.part_lens = bpy.props.BoolProperty(default=True)
bpy.types.Scene.part_display = bpy.props.BoolProperty(default=False) 
bpy.types.Scene.part_dof = bpy.props.BoolProperty(default=False) 
bpy.types.Scene.part_camera = bpy.props.BoolProperty(default=False)   
bpy.types.Scene.part_fastcam = bpy.props.BoolProperty(default=False)  
                   

#Cameras
class CameraProperties(bpy.types.Panel):
   
    bl_label = "Camera Properties"
    bl_idname = "OBJECT_PT_camera_Properties"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'TOOLS'
    bl_category = "Render Tab"
    
            
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        cscene = scene.cycles
        ob = bpy.context.object
        obj = context.object
#######################################################
# Fast Render Properties                              #
####################################################### 
        
        if context.scene.panel_renderproperties==False:
            box = layout.box()
            row = box.row()
            row.scale_y = 1.5
            row.prop(context.scene, "panel_renderproperties", text="", icon='TRIA_DOWN') 
            row.label("Render Properties")
            row.label("",icon='SCENE')
            
            #Render, Animation
            if context.scene.properties_render==False:
                
                row = layout.row()
                row.prop(context.scene, "properties_render", text="Render / CPU / CG", icon='ZOOMOUT') 
                
                box = layout.box()
                row = box.row(align=True)
                row.operator("render.render", text="Render", icon='RENDER_STILL')
                row.operator("render.render", text="Animation", icon='RENDER_ANIMATION').animation = True
                
                #Feature, Device, CG
                
                row = box.row(align=True)
                row.prop(cscene, "feature_set", text="")
                row.prop(cscene, "device", text="")
                row = box.row()
                system = context.user_preferences.system
                row.prop(system, "compute_device", text="")
            
            else:
                row = layout.row()
                row.prop(context.scene, "properties_render", text="Render / CPU / CG", icon='ZOOMIN')
            
            #Dimensions
            
            if context.scene.properties_dimensions==False:
                
                row = layout.row(align=True)
                row.prop(context.scene, "properties_dimensions", text="Dimensions", icon='ZOOMOUT') 
                row.menu("RENDER_MT_presets", text=bpy.types.RENDER_MT_presets.bl_label)
                row.operator("render.preset_add", text="", icon='ZOOMIN')
                row.operator("render.preset_add", text="", icon='ZOOMOUT').remove_active = True
                
                rd = scene.render    
                box = layout.box()
                split = box.split()
                col = split.column()
                sub = col.column(align=True)
                
                sub.label(text="Resolution:")
                sub.prop(rd, "resolution_x", text="X")
                sub.prop(rd, "resolution_y", text="Y")
                sub.prop(rd, "resolution_percentage", text="")      
                
                col = split.column()
                sub = col.column(align=True)
                sub.label(text="Frame Range:")
                sub.prop(scene, "frame_start")
                sub.prop(scene, "frame_end")
                sub.prop(scene, "frame_step") 
                
                row = box.row()
                row.menu("RENDER_MT_framerate_presets", text="Frame Rate")
                
                #Tiles
                row = box.row(align=True)
                #row.label("Tiles")
                row.prop(rd, "tile_x", text="Tile X")
                row.prop(rd, "tile_y", text="Tile Y") 
                
                row = box.row()
                row.prop(cscene, "film_transparent")
                row.prop(rd, "use_border", text="Border")
                row = box.split(percentage= 0.49)
                
                row.prop(rd, "use_motion_blur", text="Motion Blur")
                row.prop(rd, "motion_blur_shutter", text="Shutter")
            
            else:
                row = layout.row()
                row.prop(context.scene, "properties_dimensions", text="Dimensions", icon='ZOOMIN')
                
            #Sampling
            if context.scene.properties_samples==False:
                row = layout.row(align=True)
                row.prop(context.scene, "properties_samples", text="Sampling", icon='ZOOMOUT') 
                row.menu("CYCLES_MT_sampling_presets", text=bpy.types.CYCLES_MT_sampling_presets.bl_label)
                row.operator("render.cycles_sampling_preset_add", text="", icon="ZOOMIN")
                row.operator("render.cycles_sampling_preset_add", text="", icon="ZOOMOUT").remove_active = True
                
                box = layout.box()
                split = box.split()
                
                col = split.column()
                sub = col.column(align=True)
                sub.label("Settings:")
                sub.prop(cscene, "seed")
                sub.prop(cscene, "sample_clamp_direct")
                sub.prop(cscene, "sample_clamp_indirect")
                
                col = split.column()
                sub = col.column(align=True)
                sub.label(text="Samples:")
                sub.prop(cscene, "samples", text="Render")
                sub.prop(cscene, "preview_samples", text="Preview")
                
                row = box.row()
                row.label("Volume Heterogeneous:")
                row = box.row()
                row.prop(cscene, "volume_step_size")
                row.prop(cscene, "volume_max_steps")
                
            else:
                row = layout.row()
                row.prop(context.scene, "properties_samples", text="Sampling", icon='ZOOMIN')     
            
            #Light Path
            if context.scene.properties_lightpath==False:
                row = layout.row(align=True)
                row.prop(context.scene, "properties_lightpath", text="Light Path", icon='ZOOMOUT') 
                row.menu("CYCLES_MT_integrator_presets", text=bpy.types.CYCLES_MT_integrator_presets.bl_label)
                row.operator("render.cycles_integrator_preset_add", text="", icon="ZOOMIN")
                row.operator("render.cycles_integrator_preset_add", text="", icon="ZOOMOUT").remove_active = True
                
                scene = context.scene
                cscene = scene.cycles

                box = layout.box()
                split = box.split()
                col = split.column()
                sub = col.column(align=True)
                sub.label("Transparency:")
                sub.prop(cscene, "transparent_max_bounces", text="Max")
                sub.prop(cscene, "transparent_min_bounces", text="Min")
                sub.prop(cscene, "use_transparent_shadows", text="Shadows")

                col.separator()

                col.prop(cscene, "caustics_reflective", text="Refle Caustics")
                col.prop(cscene, "caustics_refractive", text="Refra Caustics")
                col.prop(cscene, "blur_glossy")

                col = split.column()

                sub = col.column(align=True)
                sub.label(text="Bounces:")
                sub.prop(cscene, "max_bounces", text="Max")
                sub.prop(cscene, "min_bounces", text="Min")

                sub = col.column(align=True)
                sub.prop(cscene, "diffuse_bounces", text="Diffuse")
                sub.prop(cscene, "glossy_bounces", text="Glossy")
                sub.prop(cscene, "transmission_bounces", text="Transmission")
                sub.prop(cscene, "volume_bounces", text="Volume")
            else:
                row = layout.row()
                row.prop(context.scene, "properties_lightpath", text="Light Path", icon='ZOOMIN') 
             
        else:
                box = layout.box()
                row = box.row()
                row.scale_y = 1.5
                row.prop(context.scene, "panel_renderproperties", text="", icon='TRIA_RIGHT') 
                row.label("Render Properties")
                row.label("",icon='SCENE')     
        
#######################################################
# Cameras                                             #
#######################################################         
        
        
        
        if context.scene.panel_cam==False:
            box = layout.box()
            row = box.row()
            row.scale_y = 1.5
            row.prop(context.scene, "panel_cam", text="", icon='TRIA_DOWN') 
            row.label("Cameras")
            row.label("",icon='CAMERA_DATA')
            
            box = layout.box()
            row = box.row(align=True)
            row.operator("object.listentryop", text = "Add", icon='ZOOMIN').type = "add"
            row.operator("object.listentryop", text = "Remove", icon='ZOOMOUT').type = "remove"
            row.operator("object.listentryop", text = "Remove All", icon='X').type = "removeAll" 
            box.template_list("MESH_UL_mylist", "", context.scene, "lst", context.scene, "lst_idx") 
            
            if bpy.data.objects[bpy.context.scene.lst[bpy.context.scene.lst_idx].ObjectName].type == 'CAMERA' :
                #Views
                row = box.row()
                row.label("", icon='OUTLINER_OB_CAMERA')
                row.prop(ob, "name", text="")
                row = box.row(align=True)
                row.operator("view3d.viewnumpad", text="View Camera", icon='VISIBLE_IPO_ON').type='CAMERA'
                if bpy.context.space_data.lock_camera == False:
                    row.operator("wm.context_toggle", text="Lock Cam to View", icon='UNLOCKED').data_path = "space_data.lock_camera"
                elif bpy.context.space_data.lock_camera == True:
                    row.operator("wm.context_toggle", text="Lock Cam to View", icon='LOCKED').data_path = "space_data.lock_camera"
                    
                row = box.row(align=True)
                row.operator("view3d.camera_to_view", text="Cam to view", icon = 'MAN_TRANS')
                if bpy.context.object.lock_rotation[0] == False:
                    row.operator("object.lockcameratransforms", text="Lock Transforms", icon = 'UNLOCKED')
                elif  bpy.context.object.lock_rotation[0] == True:
                    row.operator("object.lockcameratransforms", text="Lock Transforms", icon = 'LOCKED')
                
                #Fast Camera Tools    
                if context.scene.part_fastcam==False:
                    row = layout.row()
                    row.prop(context.scene, "part_fastcam", text="Fast Camera Properties", icon='ZOOMOUT') 
                    row.label("",icon='FRAME_NEXT')
                    
                    box = layout.box()
                    row = box.row()
                    row.prop(context.object.data, "lens", text="Focal Length")
                    #Clipping
                    row = box.row()
                    row.label("Clipping :")
                    row = box.row(align=True)
                    row.prop(context.object.data, "clip_start", text="Start")
                    row.prop(context.object.data, "clip_end", text="End")
                    
                    row = box.row()
                    row.label("Composition Guides :")
                    row = box.row()
                    row.prop(context.object.data, "show_guide", text="Composition guides")
                    
                    row = box.row()
                    row.label("Depth Of Field :")
                    
                    row = box.row()
                    row.prop(context.object.data, "dof_object", text="")
                    row.prop(context.object.data.cycles, "aperture_type", text="")
                    
                    row = box.row()
                    row.prop(context.object.data, "dof_distance", text="Distance")
                    
                    if context.object.data.cycles.aperture_type == 'RADIUS':
                        row.prop(context.object.data.cycles, "aperture_size", text="size")
                            
                    elif context.object.data.cycles.aperture_type == 'FSTOP':
                        row.prop(context.object.data.cycles, "aperture_fstop", text="size")
                else:
                    row = layout.row()
                    row.prop(context.scene, "part_fastcam", text="Fast Camera Properties", icon='ZOOMIN') 
                    row.label("",icon='FRAME_NEXT')
                
                
                #Lens    
                if context.scene.part_lens==False:
                    row = layout.row()
                    row.prop(context.scene, "part_lens", text="Lens", icon='DOWNARROW_HLT') 
                    row.label("",icon='SCENE')
                    
                    box = layout.box()
                    row = box.row()
                    row.prop(context.object.data, "type", text="")
                    row = box.row(align=True)
                    if context.object.data.type == 'PERSP':
                        row.prop(context.object.data, "lens_unit", text="")
                        if context.object.data.lens_unit == 'MILLIMETERS':
                            row.prop(context.object.data, "lens", text="Focal Length")
                        if context.object.data.lens_unit == 'FOV':
                            row.prop(context.object.data, "angle", text="FOV")   
                        
                    if context.object.data.type == 'ORTHO': 
                        row.prop(context.object.data, "ortho_scale", text="Orthographic Scale")   
                    
                    if context.object.data.type == 'PANO': 
                        row.prop(context.object.data, "lens_unit", text="")
                        if context.object.data.lens_unit == 'MILLIMETERS':
                            row.prop(context.object.data, "lens", text="Focal Length")
                        if context.object.data.lens_unit == 'FOV':
                            row.prop(context.object.data, "angle", text="FOV") 
                         
                        
                    split = box.split(percentage=0.4)
                    col = split.column()
                    col.label("Shift :")
                    col.prop(context.object.data, "shift_x", text="X")
                    col.prop(context.object.data, "shift_y", text="Y")

                    
                    col = split.column(align=True)
                    col.label("Clipping :")
                    col.prop(context.object.data, "clip_start", text="Start")
                    col.prop(context.object.data, "clip_end", text="End")
                else:
                    row = layout.row()
                    row.prop(context.scene, "part_lens", text="Lens", icon='ZOOMIN') 
                    row.label("",icon='SCENE')
                
                #Display  
                if context.scene.part_display==False: 
                    row = layout.row()
                    row.prop(context.scene, "part_display", text="Display", icon='ZOOMOUT')
                    row.label("",icon='GRID')
                    
                    box = layout.box()
                    row = box.row(align=True)
                    row.prop(context.object.data, "show_limits", text="Limits")
                    row.prop(context.object.data, "show_mist", text="Mist")
                    row = box.row(align=True)
                    row.prop(context.object.data, "show_title_safe", text="Safe Areas")
                    row.prop(context.object.data, "show_sensor", text="Sensor")
                    row = box.row(align=True)
                    row.prop(context.object.data, "show_name", text="Name")
                    row = box.row(align=True)
                    row.label("Composition guides :")
                    row = box.row(align=True)
                    row.prop(context.object.data, "show_guide", text="Composition guides")
                else:
                    row = layout.row()
                    row.prop(context.scene, "part_display", text="Display", icon='ZOOMIN') 
                    row.label("",icon='GRID')  
                
                #Depth Of Field 
                if context.scene.part_dof==False:
                    row = layout.row()
                    row.prop(context.scene, "part_dof", text="Depth of Field", icon='ZOOMOUT') 
                    row.label("",icon='ZOOM_IN') 
                    
                    box = layout.box()
                    row = box.row(align=True)
                    row.prop(context.object.data, "dof_object", text="")
                    row.prop(context.object.data.cycles, "aperture_type", text="")
                    
                    row = box.row(align=True)
                    row.prop(context.object.data, "dof_distance", text="Distance")
                    
                    if context.object.data.cycles.aperture_type == 'RADIUS':
                        row.prop(context.object.data.cycles, "aperture_size", text="size")
                            
                    elif context.object.data.cycles.aperture_type == 'FSTOP':
                        row.prop(context.object.data.cycles, "aperture_fstop", text="size")
                    row.separator()    
                    row = box.row()
                    row.prop(context.object.data.cycles, "aperture_blades", text="Blades")
                    row.prop(context.object.data.cycles, "aperture_rotation", text="Rotation")
                    split = box.split(percentage= 0.49)
                    col = split.column()
                    col.prop(context.object.data.cycles, "aperture_ratio", text="Ratio")
                else:
                    row = layout.row()
                    row.prop(context.scene, "part_dof", text="Depth of Field", icon='ZOOMIN')
                    row.label("",icon='ZOOM_IN') 
               
                #Camera
                
                if context.scene.part_camera==False:
                    row = layout.row(align=True)
                    row.prop(context.scene, "part_camera", text="Camera", icon='ZOOMOUT')
                    row.menu("CAMERA_MT_presets", text=bpy.types.CAMERA_MT_presets.bl_label)
                    row.operator("camera.preset_add", text="", icon='ZOOMIN')
                    row.operator("camera.preset_add", text="", icon='ZOOMOUT').remove_active = True
                    
                    box = layout.box()
                    row = box.row()
                    row.label("Sensor")
                    row = box.row(align=True)
                    
                    if context.object.data.sensor_fit == 'AUTO':
                        row.prop(context.object.data, "sensor_width", text="Size")
                        
                    if context.object.data.sensor_fit == 'HORIZONTAL':
                        row.prop(context.object.data, "sensor_width", text="Width")
                        row.prop(context.object.data, "sensor_height", text="Height")
                        
                    if context.object.data.sensor_fit == 'VERTICAL':
                        row.prop(context.object.data, "sensor_width", text="Size")
                        row.prop(context.object.data, "sensor_height", text="Height")
                        
                    row.prop(context.object.data, "sensor_fit", text="")
                else:
                    row = layout.row()
                    row.prop(context.scene, "part_camera", text="Camera", icon='ZOOMIN')   
                    row.label("",icon='CAMERA_DATA')  
            
        else:
                box = layout.box()
                row = box.row()
                row.scale_y = 1.5
                row.prop(context.scene, "panel_cam", text="", icon='TRIA_RIGHT') 
                row.label("Cameras")
                row.label("",icon='CAMERA_DATA')                
        
        #layout.separator()
        
        
#######################################################
# Lights                                              #
#######################################################   

        #Panel Light
        if context.scene.panel_lights==False:
            box = layout.box()
            row = box.row()
            row.scale_y = 1.5
            row.prop(context.scene, "panel_lights", text="", icon='TRIA_DOWN') 
            row.label("Lights")
            row.label("",icon='LAMP_SPOT')
            
            #Lamp type for icons
            box = layout.box()
            row = box.row(align=True)
            if obj.data.type == 'AREA':
                row.prop(ob, "name", text="", icon='LAMP_AREA')
                
            if obj.data.type == 'HEMI':    
                row.prop(ob, "name", text="", icon='LAMP_HEMI')   
            
            if obj.data.type == 'SPOT':    
                row.prop(ob, "name", text="", icon='LAMP_SPOT')
            
            if obj.data.type == 'SUN':    
                row.prop(ob, "name", text="", icon='LAMP_SUN')    
                
            if obj.data.type == 'POINT':    
                row.prop(ob, "name", text="", icon='LAMP_POINT')  
                   
            #Visibility, selection, Render, Delete 
            row.prop(obj, "hide", icon='VISIBLE_IPO_ON', text="")
            row.prop(obj, "hide_select", icon='RESTRICT_SELECT_OFF', text="")
            row.prop(obj, "hide_render", icon='RESTRICT_RENDER_OFF', text="")
            row.operator("object.delete", text="", icon='PANEL_CLOSE')
            
            #Light Type
            row = box.row()
            row.prop(obj.data, "type", text="Type ") 
            if obj.data.type in {'POINT', 'SUN'}:
                row = box.row()
                row.prop(obj.data, "shadow_soft_size", text="Size")
                row = box.row(align=True)
                row.prop(obj.data.cycles, "use_multiple_importance_sampling", text="MIS")  
                row.prop(obj.data.cycles, "cast_shadow", text="Shadow")
                
            if obj.data.type == 'AREA':
                row = box.row()
                row.prop(obj.data, "shape", text="")
                
                if obj.data.shape == 'SQUARE':
                    row = box.row()
                    row.prop(ob.data, "size")
                    
                elif obj.data.shape == 'RECTANGLE':
                    row = box.row()
                    row.prop(obj.data, "size")
                    row.prop(obj.data, "size_y")
                row = box.row()
                row.prop(obj.data.cycles, "use_multiple_importance_sampling", text="MIS")  
                row.prop(obj.data.cycles, "cast_shadow", text="Shadow")
                row.prop(lamp, "color")

            if obj.data.type == 'HEMI':
                row = box.row(align=True)
                row.prop(obj.data.cycles, "use_multiple_importance_sampling", text="MIS")  
                row.prop(obj.data.cycles, "cast_shadow", text="Shadow")
                layout.label(text="Not supported, interpreted as sun lamp")
                
            if obj.data.type == 'SPOT':
                row = box.row()
                row.prop(obj.data, "shadow_soft_size", text="Size")
                
                row = box.row(align=True)
                row.prop(obj.data.cycles, "use_multiple_importance_sampling", text="MIS")  
                row.prop(obj.data.cycles, "cast_shadow", text="Shadow")
                
                row = box.row()
                row.label("Spot Shape :")
                row.prop(obj.data, "spot_size", text="Size")
                row.prop(obj.object.data, "spot_blend", text="Blend", slider=True)
                row.prop(obj.data, "show_cone")
                        
        else:
            box = layout.box()
            row = box.row()
            row.scale_y = 1.5
            
            row.prop(context.scene, "panel_lights", text="", icon='TRIA_RIGHT') 
            row.label("Lights")
            row.label("",icon='LAMP_SPOT')     

#Register     
def register():
    bpy.utils.register_class(CameraProperties)
    bpy.utils.register_class(LockCameraTransforms)
    bpy.utils.register_class(MESH_UL_mylist)
    bpy.utils.register_class(Line)
    bpy.utils.register_class(ListEntryOp)
    
    bpy.types.Scene.lst = bpy.props.CollectionProperty(type=Line)
    bpy.types.Scene.lst_idx = bpy.props.IntProperty(default=0)
    
    bpy.utils.register_class(RENDER_MT_framerate_presets)
    
    
    
#Unregister    
def unregister():
    bpy.utils.unregister_class(CameraProperties)
    bpy.utils.unregister_class(LockCameraTransforms)
    bpy.utils.unregister_class(MESH_UL_mylist)
    bpy.utils.unregister_class(Line)
    bpy.utils.unregister_class(ListEntryOp)
    bpy.utils.unregister_class(RENDER_MT_framerate_presets)
    
    del bpy.types.Scene.lst
    del bpy.types.Scene.lst_idx

    
if __name__ == "__main__":
    register()



