import bpy
from bpy.types import Menu, Panel, UIList
from rna_prop_ui import PropertyPanel

class CAM_UL_mylist(bpy.types.UIList):
    bl_idname = "object.cameralist"
    bl_label = "Camera_List"
    
    
    @classmethod
    def poll(cls, context):
        
        obj = context.object
        return (obj and obj.type in {'CAMERA'})

    def draw(self, context):
        layout = self.layout

        ob = context.object
        camera = bpy.data.objects[cam.name]

        row = layout.row()
        row.template_list(ob, "camera", "")

        col = row.column(align=True)
        col.operator("object.camera_add", icon='ZOOMIN', text="")
        col.operator("object.delete", icon='ZOOMOUT', text="").all = False
        

    

#Lock Camera Transforms
class LockCameraTransforms(bpy.types.Operator):  
    bl_idname = "object.lockcameratransforms"  
    bl_label = "Lock Camera Transforms"  
    
    def execute(self, context):
           
        if bpy.context.object.lock_rotation[0] == False:
            bpy.context.object.lock_rotation[0] = True
            bpy.context.object.lock_rotation[1] = True
            bpy.context.object.lock_rotation[2] = True
            bpy.context.object.lock_location[0] = True
            bpy.context.object.lock_location[1] = True
            bpy.context.object.lock_location[2] = True
            bpy.context.object.lock_scale[0] = True
            bpy.context.object.lock_scale[1] = True
            bpy.context.object.lock_scale[2] = True
            
        elif bpy.context.object.lock_rotation[0] == True :
             bpy.context.object.lock_rotation[0] = False
             bpy.context.object.lock_rotation[1] = False
             bpy.context.object.lock_rotation[2] = False
             bpy.context.object.lock_location[0] = False
             bpy.context.object.lock_location[1] = False
             bpy.context.object.lock_location[2] = False
             bpy.context.object.lock_scale[0] = False
             bpy.context.object.lock_scale[1] = False
             bpy.context.object.lock_scale[2] = False

        return {'FINISHED'}
           
#Cameras props
bpy.types.Scene.part_lens = bpy.props.BoolProperty(default=True)
bpy.types.Scene.part_display = bpy.props.BoolProperty(default=False) 
bpy.types.Scene.part_dof = bpy.props.BoolProperty(default=False) 
bpy.types.Scene.part_camera = bpy.props.BoolProperty(default=False)                  

#Cameras
class CameraProperties(bpy.types.Panel):
   
    bl_label = "Camera Properties"
    bl_idname = "OBJECT_PT_camera_Properties"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'TOOLS'
    bl_category = "Render"
    
    def draw(self, context):
        ob = bpy.context.object
        obj = context.object
        layout = self.layout
           
        #Base Camera
        if ob.type == 'CAMERA':
            #layout.template_list(ob,"object.cameralist")
            row = layout.row(align=True)
            
            row.prop(ob, "name", text="", icon='OUTLINER_DATA_CAMERA')
            row.prop(obj, "hide", icon='VISIBLE_IPO_ON', text="")
            row.prop(obj, "hide_select", icon='RESTRICT_SELECT_OFF', text="")
            row.prop(obj, "hide_render", icon='RESTRICT_RENDER_OFF', text="")
            row.operator("view3d.object_as_camera", text="", icon='CURSOR')
            row.operator("object.delete", text="", icon='PANEL_CLOSE')
            row = layout.row(align=True)
            row.operator("view3d.viewnumpad", text="View Camera", icon='VISIBLE_IPO_ON').type='CAMERA'
            if bpy.context.space_data.lock_camera == False:
                row.operator("wm.context_toggle", text="Lock Cam to View", icon='UNLOCKED').data_path = "space_data.lock_camera"
            elif bpy.context.space_data.lock_camera == True:
                row.operator("wm.context_toggle", text="Lock Cam to View", icon='LOCKED').data_path = "space_data.lock_camera"
                
            row = layout.row(align=True)
            row.operator("view3d.camera_to_view", text="Cam to view", icon = 'MAN_TRANS')
            if bpy.context.object.lock_rotation[0] == False:
                row.operator("object.lockcameratransforms", text="Lock Transforms", icon = 'UNLOCKED')
            elif  bpy.context.object.lock_rotation[0] == True:
                row.operator("object.lockcameratransforms", text="Lock Transforms", icon = 'LOCKED')
            
            #Lens    
            if context.scene.part_lens==True:
                layout.prop(context.scene, "part_lens", text="Lens", icon='TRIA_DOWN') 
                layout.prop(context.object.data, "type", text="")
                row = layout.row(align=True)
                if context.object.data.type == 'PERSP':
                    row.prop(context.object.data, "lens_unit", text="")
                    if context.object.data.lens_unit == 'MILLIMETERS':
                        row.prop(context.object.data, "lens", text="Focal Length")
                    if context.object.data.lens_unit == 'FOV':
                        row.prop(context.object.data, "angle", text="FOV")   
                    
                if context.object.data.type == 'ORTHO': 
                    layout.prop(context.object.data, "ortho_scale", text="Orthographic Scale")   
                
                if context.object.data.type == 'PANO': 
                    row.prop(context.object.data, "lens_unit", text="")
                    if context.object.data.lens_unit == 'MILLIMETERS':
                        row.prop(context.object.data, "lens", text="Focal Length")
                    if context.object.data.lens_unit == 'FOV':
                        row.prop(context.object.data, "angle", text="FOV") 
                     
                    
                split = layout.split(percentage=0.4)
                col = split.column()
                col.label("Shift :")
                col.prop(context.object.data, "shift_x", text="X")
                col.prop(context.object.data, "shift_y", text="Y")

                
                col = split.column(align=True)
                col.label("Clipping :")
                col.prop(context.object.data, "clip_start", text="Start")
                col.prop(context.object.data, "clip_end", text="End")
            else:
                layout.prop(context.scene, "part_lens", text="Lens", icon='TRIA_RIGHT') 
            
            #Display  
            if context.scene.part_display==True: 
                layout.prop(context.scene, "part_display", text="Display", icon='TRIA_DOWN')
                row = layout.row(align=True)
                row.prop(context.object.data, "show_limits", text="Limits")
                row.prop(context.object.data, "show_mist", text="Mist")
                row = layout.row(align=True)
                row.prop(context.object.data, "show_title_safe", text="Safe Areas")
                row.prop(context.object.data, "show_sensor", text="Sensor")
                row = layout.row(align=True)
                row.prop(context.object.data, "show_name", text="Name")
                
                layout.label("Composition guides :")
                layout.prop(context.object.data, "show_guide", text="Composition guides")
            else:
                layout.prop(context.scene, "part_display", text="Display", icon='TRIA_RIGHT')   
            
            #Depth Of Field 
            if context.scene.part_dof==True:
                layout.prop(context.scene, "part_dof", text="Depth of Field", icon='TRIA_DOWN') 
                row = layout.row(align=True)
                row.prop(context.object.data, "dof_object", text="")
                row.prop(context.object.data.cycles, "aperture_type", text="")
                
                row = layout.row(align=True)
                row.prop(context.object.data, "dof_distance", text="Distance")
                
                if context.object.data.cycles.aperture_type == 'RADIUS':
                    row.prop(context.object.data.cycles, "aperture_size", text="size")
                        
                elif context.object.data.cycles.aperture_type == 'FSTOP':
                    row.prop(context.object.data.cycles, "aperture_fstop", text="size")
                layout.separator()    
                row = layout.row()
                row.prop(context.object.data.cycles, "aperture_blades", text="Blades")
                row.prop(context.object.data.cycles, "aperture_rotation", text="Rotation")
                split = layout.split(percentage= 0.49)
                col = split.column()
                col.prop(context.object.data.cycles, "aperture_ratio", text="Ratio")
            else:
                layout.prop(context.scene, "part_dof", text="Depth of Field", icon='TRIA_RIGHT')
            
            #Camera
            if context.scene.part_camera==True:
                layout.prop(context.scene, "part_camera", text="Camera", icon='TRIA_DOWN')
                row = layout.row(align=True)
                row.menu("CAMERA_MT_presets", text=bpy.types.CAMERA_MT_presets.bl_label)
                #row.prop(context.object.data, "CAMERA_MT_presets", text="Camera Presets")
                row.operator("camera.preset_add", text="", icon='ZOOMIN')
                row.operator("camera.preset_add", text="", icon='ZOOMOUT').remove_active = True
                
                layout.prop(context.object.data, "sensor_fit", text="")
                if context.object.data.sensor_fit == 'AUTO':
                    layout.prop(context.object.data, "sensor_width", text="Size")
                    
                if context.object.data.sensor_fit == 'HORIZONTAL':
                    layout.prop(context.object.data, "sensor_width", text="Width")
                    layout.prop(context.object.data, "sensor_height", text="Height")
                    
                if context.object.data.sensor_fit == 'VERTICAL':
                    layout.prop(context.object.data, "sensor_width", text="Size")
                    layout.prop(context.object.data, "sensor_height", text="Height")
                
            else:
                layout.prop(context.scene, "part_camera", text="Camera", icon='TRIA_RIGHT')    
        else:
            layout.label("No Camera Selected", icon='ERROR')            


#Lamps
class LampProperties(bpy.types.Panel):
   
    bl_label = "Lamp Properties"
    bl_idname = "OBJECT_PT_Lamp_Properties"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'TOOLS'
    bl_category = "Render"
    
    def draw(self, context):
        
        obj = context.object
        ob = bpy.context.object
        
        layout = self.layout
        row = layout.row(align=True)
        
        #for ob in bpy.context.scene.objects:
        if ob.type == 'LAMP':
        
            if obj.data.type == 'AREA':
                row.prop(ob, "name", text="", icon='LAMP_AREA')
                
            if obj.data.type == 'HEMI':    
                row.prop(ob, "name", text="", icon='LAMP_HEMI')   
            
            if obj.data.type == 'SPOT':    
                row.prop(ob, "name", text="", icon='LAMP_SPOT')
            
            if obj.data.type == 'SUN':    
                row.prop(ob, "name", text="", icon='LAMP_SUN')    
                
            if obj.data.type == 'POINT':    
                row.prop(ob, "name", text="", icon='LAMP_POINT')     
                   
            row.prop(obj, "hide", icon='VISIBLE_IPO_ON', text="")
            row.prop(obj, "hide_select", icon='RESTRICT_SELECT_OFF', text="")
            row.prop(obj, "hide_render", icon='RESTRICT_RENDER_OFF', text="")
            row.operator("object.delete", text="", icon='PANEL_CLOSE')
            layout.prop(obj.data, "type", text="Type ") 
        
            if obj.data.type in {'POINT', 'SUN'}:
                layout.prop(obj.data, "shadow_soft_size", text="Size")
                row = layout.row(align=True)
                row.prop(obj.data.cycles, "use_multiple_importance_sampling", text="MIS")  
                row.prop(obj.data.cycles, "cast_shadow", text="Shadow")
                
            if obj.data.type == 'AREA':
                layout.prop(obj.data, "shape", text="")
                
                if obj.data.shape == 'SQUARE':
                    layout.prop(ob.data, "size")
                    
                elif obj.data.shape == 'RECTANGLE':
                    layout.prop(obj.data, "size")
                    layout.prop(obj.data, "size_y")
                row = layout.row()
                #find_node = (output_type)
                row.prop(obj.data.cycles, "use_multiple_importance_sampling", text="MIS")  
                row.prop(obj.data.cycles, "cast_shadow", text="Shadow")
                #layout.prop("object.aligntoview", text="view_align")
                #node = find_node(context.object, 'OUTPUT_LAMP')    
                #layout.prop(bpy.data.node_groups["Shader Nodetree"].nodes["Emission"].inputs[1], "default_value" )
                

                #node = find_node_input(output_type)
                #layout.prop(bpy.data.node_groups["Shader Nodetree"].nodes["Emission"].inputs[0], "default_value")    
                 
                    
            if obj.data.type == 'HEMI':
                row = layout.row(align=True)
                row.prop(obj.data.cycles, "use_multiple_importance_sampling", text="MIS")  
                row.prop(obj.data.cycles, "cast_shadow", text="Shadow")
                layout.label(text="Not supported, interpreted as sun lamp")
                
            if obj.data.type == 'SPOT':
                layout.prop(obj.data, "shadow_soft_size", text="Size")
                row = layout.row(align=True)
                row.prop(obj.data.cycles, "use_multiple_importance_sampling", text="MIS")  
                row.prop(obj.data.cycles, "cast_shadow", text="Shadow")
                layout.label("Spot Shape :")
                layout.prop(obj.data, "spot_size", text="Size")
                layout.prop(obj.object.data, "spot_blend", text="Blend", slider=True)
                layout.prop(obj.data, "show_cone")
                    
        else :
            
            layout.label("No Lamp Selected", icon='ERROR')

        
def register():
    bpy.utils.register_class(LampProperties)
    bpy.utils.register_class(CameraProperties)
    bpy.utils.register_class(LockCameraTransforms)
    #bpy.utils.register_class(CAM_UL_mylist)
    
    
    
    
def unregister():
    bpy.utils.unregister_class(LampProperties)
    bpy.utils.unregister_class(CameraProperties)
    bpy.utils.unregister_class(LockCameraTransforms)
    #bpy.utils.unregister_class(CAM_UL_mylist)
    
if __name__ == "__main__":
    register()


